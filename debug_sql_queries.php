<?php
/**
 * Debug SQL Queries - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL queries ‡πÅ‡∏•‡∏∞ database operations
 * ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£ debug ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å database operations
 */

echo "<h1>üîç Debug SQL Queries - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL queries ‡πÅ‡∏•‡∏∞ database operations</h1>";

// ‡πÄ‡∏õ‡∏¥‡∏î error reporting ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);

// 1. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
echo "<h2>1. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</h2>";
try {
    require_once 'config/config.php';
    require_once 'app/core/Database.php';
    require_once 'app/services/ImportExportService.php';
    echo "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
} catch (Exception $e) {
    echo "‚ùå Error loading files: " . $e->getMessage() . "<br>";
    exit;
}

// 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
echo "<h2>2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>";
try {
    $db = new Database();
    echo "‚úÖ Database connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏á‡πà‡∏≤‡∏¢‡πÜ
    $result = $db->fetchOne("SELECT 1 as test");
    echo "‚úÖ Basic query ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
} catch (Exception $e) {
    echo "‚ùå Database Error: " . $e->getMessage() . "<br>";
    exit;
}

// 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö tableExists method
echo "<h2>3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö tableExists method</h2>";
try {
    $tables = ['customers', 'orders', 'customer_activities'];
    foreach ($tables as $table) {
        $exists = $db->tableExists($table);
        echo ($exists ? "‚úÖ" : "‚ùå") . " ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {$table}: " . ($exists ? "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà") . "<br>";
    }
} catch (Exception $e) {
    echo "‚ùå TableExists Error: " . $e->getMessage() . "<br>";
}

// 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers
echo "<h2>4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers</h2>";
try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SELECT query
    $customers = $db->fetchAll("SELECT COUNT(*) as count FROM customers");
    echo "‚úÖ SELECT customers ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . $customers[0]['count'] . " ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SELECT ‡∏î‡πâ‡∏ß‡∏¢ WHERE clause
    $testCustomer = $db->fetchOne("SELECT customer_id, first_name, phone FROM customers WHERE phone = ?", ['0812345678']);
    if ($testCustomer) {
        echo "‚úÖ SELECT customer by phone ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    } else {
        echo "‚úÖ SELECT customer by phone ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)<br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå Customers Query Error: " . $e->getMessage() . "<br>";
}

// 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
echo "<h2>5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    $existingCustomer = $db->fetchOne("SELECT customer_id FROM customers WHERE phone = ?", ['0812345678']);
    
    if (!$existingCustomer) {
        // INSERT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        $customerData = [
            'first_name' => '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            'last_name' => '‡∏£‡∏∞‡∏ö‡∏ö',
            'phone' => '0812345678',
            'email' => 'test@example.com',
            'address' => '123 ‡∏ñ.‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            'district' => '‡πÄ‡∏Ç‡∏ï‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            'province' => '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            'postal_code' => '10000',
            'customer_status' => 'new',
            'temperature_status' => 'cold',
            'customer_grade' => 'C',
            'basket_type' => 'distribution',
            'is_active' => 1,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];
        
        $customerId = $db->insert('customers', $customerData);
        echo "‚úÖ INSERT customer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ID = {$customerId}<br>";
    } else {
        echo "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ID = " . $existingCustomer['customer_id'] . "<br>";
        $customerId = $existingCustomer['customer_id'];
    }
    
} catch (Exception $e) {
    echo "‚ùå INSERT Error: " . $e->getMessage() . "<br>";
    $customerId = null;
}

// 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ UPDATE ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
echo "<h2>6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ UPDATE ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>";
if ($customerId) {
    try {
        $updateData = ['updated_at' => date('Y-m-d H:i:s')];
        $affectedRows = $db->update('customers', $updateData, 'customer_id = ?', [$customerId]);
        echo "‚úÖ UPDATE customer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {$affectedRows} ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï<br>";
    } catch (Exception $e) {
        echo "‚ùå UPDATE Error: " . $e->getMessage() . "<br>";
    }
}

// 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders
echo "<h2>7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders</h2>";
try {
    $orders = $db->fetchAll("SELECT COUNT(*) as count FROM orders");
    echo "‚úÖ SELECT orders ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . $orders[0]['count'] . " ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
} catch (Exception $e) {
    echo "‚ùå Orders Query Error: " . $e->getMessage() . "<br>";
}

// 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT order
echo "<h2>8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT order</h2>";
if ($customerId) {
    try {
        $orderData = [
            'customer_id' => $customerId,
            'order_number' => 'TEST-' . date('YmdHis'),
            'total_amount' => 1000.00,
            'discount_amount' => 0.00,
            'net_amount' => 1000.00,
            'payment_status' => 'pending',
            'delivery_status' => 'pending',
            'created_by' => 1,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];
        
        $orderId = $db->insert('orders', $orderData);
        echo "‚úÖ INSERT order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ID = {$orderId}<br>";
        
    } catch (Exception $e) {
        echo "‚ùå INSERT Order Error: " . $e->getMessage() . "<br>";
    }
}

// 9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer_activities
echo "<h2>9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer_activities</h2>";
try {
    $activities = $db->fetchAll("SELECT COUNT(*) as count FROM customer_activities");
    echo "‚úÖ SELECT customer_activities ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . $activities[0]['count'] . " ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
} catch (Exception $e) {
    echo "‚ùå Customer Activities Query Error: " . $e->getMessage() . "<br>";
}

// 10. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT customer_activity
echo "<h2>10. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT customer_activity</h2>";
if ($customerId) {
    try {
        $activityData = [
            'customer_id' => $customerId,
            'activity_type' => 'purchase',
            'activity_date' => date('Y-m-d'),
            'description' => '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
            'amount' => 1000.00,
            'created_at' => date('Y-m-d H:i:s')
        ];
        
        $activityId = $db->insert('customer_activities', $activityData);
        echo "‚úÖ INSERT customer_activity ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ID = {$activityId}<br>";
        
    } catch (Exception $e) {
        echo "‚ùå INSERT Activity Error: " . $e->getMessage() . "<br>";
    }
}

// 11. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö complex queries ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô ImportExportService
echo "<h2>11. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö complex queries ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô ImportExportService</h2>";

try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô updateCustomerPurchaseHistory
    $purchaseQuery = "INSERT INTO customer_activities (customer_id, activity_type, activity_date, description, amount, created_at) 
                      VALUES (?, ?, ?, ?, ?, ?)";
    $stmt = $db->getPdo()->prepare($purchaseQuery);
    echo "‚úÖ Prepare purchase query ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô updateCustomerTotalPurchase
    $totalQuery = "UPDATE customers SET total_purchase_amount = (
                      SELECT COALESCE(SUM(amount), 0) 
                      FROM customer_activities 
                      WHERE customer_id = ? AND activity_type = 'purchase'
                   ) WHERE customer_id = ?";
    $stmt = $db->getPdo()->prepare($totalQuery);
    echo "‚úÖ Prepare total purchase query ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
} catch (Exception $e) {
    echo "‚ùå Complex Query Error: " . $e->getMessage() . "<br>";
}

// 12. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö transaction handling
echo "<h2>12. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö transaction handling</h2>";
try {
    $db->beginTransaction();
    echo "‚úÖ Begin transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // ‡∏ó‡∏≥ query ‡∏á‡πà‡∏≤‡∏¢‡πÜ
    $result = $db->fetchOne("SELECT 1 as test");
    echo "‚úÖ Query in transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    $db->commit();
    echo "‚úÖ Commit transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
} catch (Exception $e) {
    $db->rollback();
    echo "‚ùå Transaction Error: " . $e->getMessage() . "<br>";
}

// 13. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database connection status
echo "<h2>13. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database connection status</h2>";
try {
    $pdo = $db->getPdo();
    $attributes = [
        PDO::ATTR_ERRMODE,
        PDO::ATTR_DEFAULT_FETCH_MODE,
        PDO::ATTR_EMULATE_PREPARES
    ];
    
    foreach ($attributes as $attr) {
        $value = $pdo->getAttribute($attr);
        echo "‚úÖ PDO Attribute " . $attr . ": " . $value . "<br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå PDO Attribute Error: " . $e->getMessage() . "<br>";
}

echo "<h2>üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£ Debug SQL</h2>";
echo "‡∏Å‡∏≤‡∏£ debug SQL queries ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß<br>";
echo "‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ database operations ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥<br>";
echo "‡∏´‡∏≤‡∏Å‡∏û‡∏ö error ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡πà‡∏≠‡πÑ‡∏õ<br>";
?> 