/**
 * Tag Management JavaScript
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */

// ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tags
const TAG_COLORS = [
    '#007bff', '#28a745', '#dc3545', '#ffc107', '#6f42c1',
    '#fd7e14', '#20c997', '#e83e8c', '#6c757d', '#17a2b8'
];

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö tags ‡∏ó‡∏µ‡πà user ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ
let userTags = [];
let predefinedTags = [];

/**
 * ‡πÇ‡∏´‡∏•‡∏î tags ‡∏ó‡∏µ‡πà user ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ
 */
async function loadUserTags() {
    try {
        const response = await fetch('api/tags.php?action=user_tags');
        const data = await response.json();
        
        if (response.ok) {
            userTags = data.user_tags || [];
            predefinedTags = data.predefined_tags || [];
        } else {
            console.error('Error loading user tags:', data.error);
        }
    } catch (error) {
        console.error('Error loading user tags:', error);
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á tags ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
async function displayCustomerTags(customerId, container) {
    try {
        const response = await fetch(`api/tags.php?action=get&customer_id=${customerId}`);
        const data = await response.json();
        
        if (response.ok) {
            const tags = data.tags || [];
            container.innerHTML = renderTagsHTML(tags, customerId);
        } else {
            console.error('Error loading customer tags:', data.error);
        }
    } catch (error) {
        console.error('Error loading customer tags:', error);
    }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á tags
 */
function renderTagsHTML(tags, customerId) {
    let html = '';
    
    // ‡πÅ‡∏™‡∏î‡∏á tags ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    tags.forEach(tag => {
        html += `
            <span class="badge me-1 mb-1" style="background-color: ${tag.tag_color}; cursor: pointer;" 
                  onclick="removeCustomerTag(${customerId}, '${tag.tag_name}', this)"
                  title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö tag">
                ${escapeHtml(tag.tag_name)} <i class="fas fa-times ms-1"></i>
            </span>
        `;
    });
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° tag
    html += `
        <button class="btn btn-sm btn-outline-secondary me-1 mb-1" 
                onclick="showAddTagModal(${customerId})" 
                title="‡πÄ‡∏û‡∏¥‡πà‡∏° tag">
            <i class="fas fa-plus"></i>
        </button>
    `;
    
    return html;
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° tag ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 * @param {number} customerId - ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 * @param {string} tagName - ‡∏ä‡∏∑‡πà‡∏≠ tag
 * @param {string} tagColor - ‡∏™‡∏µ tag (hex)
 * @param {boolean} showNotification - ‡πÅ‡∏™‡∏î‡∏á notification ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
 */
async function addCustomerTag(customerId, tagName, tagColor = '#007bff', showNotification = true) {
    try {
        const response = await fetch('api/tags.php?action=add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                customer_id: customerId,
                tag_name: tagName,
                tag_color: tagColor
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä tags ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            const container = document.querySelector(`[data-customer-tags="${customerId}"]`);
            if (container) {
                await displayCustomerTags(customerId, container);
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            if (showNotification) {
                showSuccessMessage(data.message || '‡πÄ‡∏û‡∏¥‡πà‡∏° Tag ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user tags
            await loadUserTags();
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä tag filter dropdown
            console.log('Refreshing tag filter dropdown...');
            await loadTagFilterOptions();
            console.log('Tag filter dropdown refreshed');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ All Customers)
            if (typeof loadAllCustomers === 'function') {
                loadAllCustomers();
            }
        } else {
            showErrorMessage(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Tag');
        }
    } catch (error) {
        console.error('Error adding tag:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
}

/**
 * ‡∏•‡∏ö tag ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
async function removeCustomerTag(customerId, tagName, element) {
    // ‡πÅ‡∏™‡∏î‡∏á confirmation
    if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Tag "${tagName}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
        return;
    }
    
    try {
        const response = await fetch('api/tags.php?action=remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                customer_id: customerId,
                tag_name: tagName
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // ‡∏•‡∏ö element ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DOM
            element.remove();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            showSuccessMessage(data.message || '‡∏•‡∏ö Tag ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            
            // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä tag filter dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö tag ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ tag filter ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
            console.log('Tag removed, preserving tag filter state...');
            
            // ‡∏£‡∏±‡∏Å‡∏©‡∏≤ tag filter state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö tag ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            // ‡πÑ‡∏°‡πà‡∏•‡∏ö tag ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å filter ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ user ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á tag ‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            const savedTagFilters = sessionStorage.getItem('selectedTagFilters');
            console.log('üîç Preserving tag filter state:', savedTagFilters);
            console.log('üîç Tag removed from customer:', tagName, 'but keeping filter active');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ tag filter ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            const finalTagFilters = sessionStorage.getItem('selectedTagFilters');
            console.log('üîç Final tag filters for refresh:', finalTagFilters);
            if (finalTagFilters) {
                try {
                    const selectedTags = JSON.parse(finalTagFilters);
                    console.log('üîç Applying tag filter with tags:', selectedTags);
                    if (selectedTags.length > 0) {
                        // ‡∏¢‡∏±‡∏á‡∏°‡∏µ tag filters ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠
                        if (typeof searchCustomersByTags === 'function' && typeof renderStandardTable === 'function') {
                            console.log('üîç Searching customers by tags...');
                            searchCustomersByTags(selectedTags).then(customers => {
                                renderStandardTable(customers, 'allCustomersTable', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ tags ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
                                
                                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï all customers count
                                const allCountBadge = document.getElementById('allCustomersCount');
                                if (allCountBadge) {
                                    allCountBadge.textContent = customers.length;
                                }
                                
                                // ‡πÄ‡∏û‡∏¥‡πà‡∏° pagination
                                setTimeout(() => {
                                    const table = document.querySelector('#allCustomersTable table');
                                    const paginationContainer = document.getElementById('allCustomersTable-pagination');
                                    if (table && paginationContainer) {
                                        paginationContainer.innerHTML = '';
                                        if (typeof paginateTable === 'function') {
                                            paginateTable(table, 'allCustomersTable-pagination', 10, 'customers_page_allCustomersTable');
                                        }
                                    }
                                }, 100);
                            });
                        }
                    } else {
                        // ‡πÑ‡∏°‡πà‡∏°‡∏µ tag filters ‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        if (typeof getAllCustomersFilters === 'function' && typeof loadAllCustomersWithFilters === 'function') {
                            const currentFilters = getAllCustomersFilters();
                            loadAllCustomersWithFilters(currentFilters);
                        } else if (typeof loadAllCustomers === 'function') {
                            loadAllCustomers();
                        }
                    }
                } catch (e) {
                    console.error('Error applying updated tag filter:', e);
                    // fallback ‡πÉ‡∏ä‡πâ filters ‡∏õ‡∏Å‡∏ï‡∏¥
                    if (typeof getAllCustomersFilters === 'function' && typeof loadAllCustomersWithFilters === 'function') {
                        const currentFilters = getAllCustomersFilters();
                        loadAllCustomersWithFilters(currentFilters);
                    } else if (typeof loadAllCustomers === 'function') {
                        loadAllCustomers();
                    }
                }
            } else {
                // ‡πÑ‡∏°‡πà‡∏°‡∏µ tag filters ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if (typeof getAllCustomersFilters === 'function' && typeof loadAllCustomersWithFilters === 'function') {
                    const currentFilters = getAllCustomersFilters();
                    loadAllCustomersWithFilters(currentFilters);
                } else if (typeof loadAllCustomers === 'function') {
                    loadAllCustomers();
                }
            }
        } else {
            showErrorMessage(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Tag');
        }
    } catch (error) {
        console.error('Error removing tag:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° tag
 */
function showAddTagModal(customerId) {
    const modalHtml = `
        <div class="modal fade" id="addTagModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">‡πÄ‡∏û‡∏¥‡πà‡∏° Tag</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addTagForm">
                            <div class="mb-3">
                                <label for="tagName" class="form-label">‡∏ä‡∏∑‡πà‡∏≠ Tag</label>
                                <input type="text" class="form-control" id="tagName" placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ tag" required>
                                <div class="form-text">‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å tags ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ:</div>
                                <div id="suggestedTags" class="mt-2">
                                    ${renderSuggestedTags()}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="tagColor" class="form-label">‡∏™‡∏µ</label>
                                <div class="d-flex flex-wrap gap-2">
                                    ${renderColorPicker()}
                                </div>
                                <input type="hidden" id="selectedColor" value="#007bff">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                        <button type="button" class="btn btn-primary" onclick="submitAddTag(${customerId})">‡πÄ‡∏û‡∏¥‡πà‡∏° Tag</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // ‡∏•‡∏ö modal ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingModal = document.getElementById('addTagModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° modal ‡πÉ‡∏´‡∏°‡πà
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // ‡πÅ‡∏™‡∏î‡∏á modal
    const modal = new bootstrap.Modal(document.getElementById('addTagModal'));
    modal.show();
    
    // Focus ‡∏ó‡∏µ‡πà input
    document.getElementById('tagName').focus();
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö suggested tags
 */
function renderSuggestedTags() {
    let html = '';
    
    // Predefined tags
    predefinedTags.forEach(tag => {
        html += `
            <span class="badge me-1 mb-1" style="background-color: ${tag.tag_color}; cursor: pointer;" 
                  onclick="selectSuggestedTag('${tag.tag_name}', '${tag.tag_color}')">
                ${escapeHtml(tag.tag_name)}
            </span>
        `;
    });
    
    // User tags
    userTags.slice(0, 10).forEach(tag => {
        html += `
            <span class="badge me-1 mb-1" style="background-color: ${tag.tag_color}; cursor: pointer;" 
                  onclick="selectSuggestedTag('${tag.tag_name}', '${tag.tag_color}')">
                ${escapeHtml(tag.tag_name)} <small>(${tag.usage_count})</small>
            </span>
        `;
    });
    
    return html || '<small class="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tags ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ</small>';
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ
 */
function renderColorPicker() {
    let html = '';
    
    TAG_COLORS.forEach(color => {
        html += `
            <button type="button" class="btn btn-sm color-picker" 
                    style="background-color: ${color}; width: 30px; height: 30px; border: 2px solid #ddd;" 
                    onclick="selectColor('${color}')" 
                    data-color="${color}">
            </button>
        `;
    });
    
    return html;
}

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å suggested tag
 */
function selectSuggestedTag(tagName, tagColor) {
    document.getElementById('tagName').value = tagName;
    selectColor(tagColor);
}

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ
 */
function selectColor(color) {
    // ‡∏•‡∏ö border ‡∏à‡∏≤‡∏Å buttons ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    document.querySelectorAll('.color-picker').forEach(btn => {
        btn.style.border = '2px solid #ddd';
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° border ‡πÉ‡∏´‡πâ button ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const selectedBtn = document.querySelector(`[data-color="${color}"]`);
    if (selectedBtn) {
        selectedBtn.style.border = '3px solid #000';
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    document.getElementById('selectedColor').value = color;
}

/**
 * Submit ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° tag
 */
async function submitAddTag(customerId) {
    const tagName = document.getElementById('tagName').value.trim();
    const tagColor = document.getElementById('selectedColor').value;
    
    if (!tagName) {
        showErrorMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Tag');
        return;
    }
    
    // ‡∏õ‡∏¥‡∏î modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('addTagModal'));
    modal.hide();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° tag
    await addCustomerTag(customerId, tagName, tagColor);
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° tags
 */
async function searchCustomersByTags(tagNames, additionalFilters = {}) {
    try {
        const params = new URLSearchParams();
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° tags
        if (tagNames && tagNames.length > 0) {
            params.append('tags', tagNames.join(','));
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° filters ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        Object.entries(additionalFilters).forEach(([key, value]) => {
            if (value) {
                params.append(key, value);
            }
        });
        
        const response = await fetch(`api/tags.php?action=search&${params.toString()}`);
        const data = await response.json();
        
        if (response.ok) {
            return data.customers || [];
        } else {
            console.error('Error searching customers by tags:', data.error);
            return [];
        }
    } catch (error) {
        console.error('Error searching customers by tags:', error);
        return [];
    }
}

/**
 * Bulk add tags
 */
async function bulkAddTags(customerIds, tagName, tagColor = '#007bff') {
    try {
        const response = await fetch('api/tags.php?action=bulk_add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                customer_ids: customerIds,
                tag_name: tagName,
                tag_color: tagColor
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showSuccessMessage(data.message || '‡πÄ‡∏û‡∏¥‡πà‡∏° Tags ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä tag filter dropdown
            console.log('Refreshing tag filter dropdown after remove...');
            loadTagFilterOptions();
            console.log('Tag filter dropdown refreshed after remove');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            if (typeof loadAllCustomers === 'function') {
                loadAllCustomers();
            } else if (typeof applyFilters === 'function') {
                applyFilters();
            }
        } else {
            showErrorMessage(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Tags');
        }
    } catch (error) {
        console.error('Error bulk adding tags:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
}

/**
 * Bulk remove tags
 */
async function bulkRemoveTags(customerIds, tagNames) {
    try {
        const response = await fetch('api/tags.php?action=bulk_remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                customer_ids: customerIds,
                tag_names: tagNames
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showSuccessMessage(data.message || '‡∏•‡∏ö Tags ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä tag filter dropdown
            console.log('Refreshing tag filter dropdown after remove...');
            loadTagFilterOptions();
            console.log('Tag filter dropdown refreshed after remove');
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            if (typeof loadAllCustomers === 'function') {
                loadAllCustomers();
            } else if (typeof applyFilters === 'function') {
                applyFilters();
            }
        } else {
            showErrorMessage(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Tags');
        }
    } catch (error) {
        console.error('Error bulk removing tags:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
}

/**
 * Utility functions
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showSuccessMessage(message) {
    // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö notification ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ alert ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if (typeof showNotification === 'function') {
        showNotification(message, 'success');
    } else {
        alert(message);
    }
}

function showErrorMessage(message) {
    // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö notification ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ alert ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if (typeof showNotification === 'function') {
        showNotification(message, 'error');
    } else {
        alert(message);
    }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î tag options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter dropdown
 */
async function loadTagFilterOptions() {
    try {
        const response = await fetch('api/tags.php?action=user_tags');
        const data = await response.json();
        
        if (response.ok) {
            const tagOptionsContainer = document.getElementById('tagFilterOptions');
            if (!tagOptionsContainer) return;
            
            let html = '';
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            html += `
                <div class="p-2 border-bottom">
                    <input type="text" class="form-control form-control-sm" id="tagSearchInput" 
                           placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tag..." onkeyup="filterTagOptions()">
                </div>
            `;
            
            html += '<div id="tagFilterList">';
            
            // User tags (‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ usage_count > 0)
            const usedUserTags = data.user_tags ? data.user_tags.filter(tag => tag.usage_count > 0) : [];
            if (usedUserTags.length > 0) {
                html += '<h6 class="dropdown-header">Tags ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h6>';
                usedUserTags.forEach(tag => {
                    html += `
                        <div class="form-check tag-option" data-tag-name="${tag.tag_name.toLowerCase()}">
                            <input class="form-check-input" type="checkbox" value="${tag.tag_name}" id="user_${tag.tag_name}">
                            <label class="form-check-label" for="user_${tag.tag_name}">
                                <span class="badge me-1" style="background-color: ${tag.tag_color}">${tag.tag_name}</span>
                                <small class="text-muted">(${tag.usage_count})</small>
                            </label>
                        </div>
                    `;
                });
            }
            
            // Predefined tags (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà)
            const usedPredefinedTags = data.predefined_tags ? data.predefined_tags.filter(tag => tag.usage_count > 0) : [];
            if (usedPredefinedTags.length > 0) {
                html += '<h6 class="dropdown-header mt-2">Tags ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</h6>';
                usedPredefinedTags.forEach(tag => {
                    html += `
                        <div class="form-check tag-option" data-tag-name="${tag.tag_name.toLowerCase()}">
                            <input class="form-check-input" type="checkbox" value="${tag.tag_name}" id="predefined_${tag.tag_name}">
                            <label class="form-check-label" for="predefined_${tag.tag_name}">
                                <span class="badge me-1" style="background-color: ${tag.tag_color}">${tag.tag_name}</span>
                                <small class="text-muted">(${tag.usage_count || 0})</small>
                            </label>
                        </div>
                    `;
                });
            }
            
            html += '</div>'; // close tagFilterList
            
            if (usedUserTags.length === 0 && usedPredefinedTags.length === 0) {
                html += '<p class="text-muted small p-2">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tags ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>';
            }
            
            tagOptionsContainer.innerHTML = html;
            
            // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            if (typeof restoreTagFilterState === 'function') {
                setTimeout(() => restoreTagFilterState(), 100);
            }
        }
    } catch (error) {
        console.error('Error loading tag filter options:', error);
    }
}

/**
 * ‡∏Å‡∏£‡∏≠‡∏á tag options ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 */
function filterTagOptions() {
    const searchInput = document.getElementById('tagSearchInput');
    const tagOptions = document.querySelectorAll('.tag-option');
    
    if (!searchInput) return;
    
    const searchTerm = searchInput.value.toLowerCase();
    
    tagOptions.forEach(option => {
        const tagName = option.getAttribute('data-tag-name');
        if (tagName.includes(searchTerm)) {
            option.style.display = 'block';
        } else {
            option.style.display = 'none';
        }
    });
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tag filter
 */
function showTagFilterModal() {
    const modalHtml = `
        <div class="modal fade" id="tagFilterModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-tags me-2"></i>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Search Box -->
                        <div class="mb-3">
                            <input type="text" class="form-control" id="modalTagSearchInput" 
                                   placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tag..." onkeyup="filterModalTagOptions()">
                        </div>
                        
                        <!-- Tag Options -->
                        <div id="modalTagFilterOptions" style="max-height: 400px; overflow-y: auto;">
                            <!-- Tag options will be loaded here -->
                        </div>
                        
                        <!-- Selected Count -->
                        <div class="mt-3 text-muted">
                            <div class="form-text">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: <span id="modalSelectedCount">0</span> tags</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" onclick="clearModalTagFilter()">
                            <i class="fas fa-times me-1"></i>‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                        <button type="button" class="btn btn-primary" onclick="applyModalTagFilter()">
                            <i class="fas fa-filter me-1"></i>‡∏Å‡∏£‡∏≠‡∏á
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // ‡∏•‡∏ö modal ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingModal = document.getElementById('tagFilterModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° modal ‡πÉ‡∏´‡∏°‡πà
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // ‡πÇ‡∏´‡∏•‡∏î tag options ‡πÉ‡∏ô modal
    loadModalTagOptions();
    
    // ‡πÅ‡∏™‡∏î‡∏á modal
    const modal = new bootstrap.Modal(document.getElementById('tagFilterModal'));
    modal.show();
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ tag filters ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    loadPreviousTagFilters();
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î tag options ‡πÉ‡∏ô modal
 */
async function loadModalTagOptions() {
    try {
        const response = await fetch('api/tags.php?action=user_tags');
        const data = await response.json();
        
        if (response.ok) {
            const container = document.getElementById('modalTagFilterOptions');
            if (!container) return;
            
            let html = '';
            
            // User tags (‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ usage_count > 0)
            const usedUserTags = data.user_tags ? data.user_tags.filter(tag => tag.usage_count > 0) : [];
            if (usedUserTags.length > 0) {
                html += '<div class="mb-4">';
                html += '<h6 class="text-primary mb-3"><i class="fas fa-user me-2"></i>Tags ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h6>';
                html += '<div class="d-flex flex-wrap gap-2">';
                usedUserTags.forEach(tag => {
                    html += `
                        <span class="badge tag-selectable" 
                              data-tag-name="${tag.tag_name}" 
                              data-tag-color="${tag.tag_color}"
                              style="background-color: ${tag.tag_color}; cursor: pointer; border: 2px solid transparent; padding: 8px 12px; font-size: 0.9rem;"
                              onclick="toggleTagSelectionNew('${tag.tag_name}', '${tag.tag_color}', this)"
                              title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">
                            ${tag.tag_name} <small class="ms-1">(${tag.usage_count})</small>
                        </span>
                    `;
                });
                html += '</div></div>';
            }
            
            // ‡πÄ‡∏≠‡∏≤ Tags ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Tags ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
            
            if (usedUserTags.length === 0) {
                html = '<div class="text-center text-muted p-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tags ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>';
            }
            
            container.innerHTML = html;
            
            // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            restoreModalTagState();
        }
    } catch (error) {
        console.error('Error loading modal tag options:', error);
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modal
 */
function filterModalTagOptions() {
    const searchInput = document.getElementById('modalTagSearchInput');
    const tagOptions = document.querySelectorAll('#modalTagFilterOptions .tag-selectable');
    
    if (!searchInput) return;
    
    const searchTerm = searchInput.value.toLowerCase();
    
    tagOptions.forEach(option => {
        const tagName = option.getAttribute('data-tag-name');
        if (tagName.includes(searchTerm)) {
            option.style.display = 'inline-flex';
        } else {
            option.style.display = 'none';
        }
    });
}

function updateModalSelectedCount() {
    const checkedTags = document.querySelectorAll('#modalTagFilterOptions input[type="checkbox"]:checked');
    const countSpan = document.getElementById('modalSelectedCount');
    if (countSpan) {
        countSpan.textContent = checkedTags.length;
    }
}

/**
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏î‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function getOppositeColor(hexColor) {
    // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏î‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å tag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î
    return '#000000';
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
 */
function getTextColor(backgroundColor) {
    // Remove # if present
    const hex = backgroundColor.replace('#', '');
    
    // Convert to RGB
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // Calculate brightness
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    
    // Return white text for dark backgrounds, black for light backgrounds
    return brightness > 128 ? '#000000' : '#ffffff';
}

function toggleTagSelectionNew(tagName, tagColor, element) {
    const isSelected = element.classList.contains('selected');
    
    if (isSelected) {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        element.classList.remove('selected');
        element.style.border = '2px solid transparent';
        element.style.boxShadow = 'none';
    } else {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tag - ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö
        element.classList.add('selected');
        const oppositeColor = getOppositeColor(tagColor);
        element.style.border = `3px solid ${oppositeColor}`;
        element.style.boxShadow = `0 0 0 1px ${oppositeColor}`;
    }
    
    updateModalSelectedCountNew();
}

function updateModalSelectedCountNew() {
    const selectedTags = document.querySelectorAll('#modalTagFilterOptions .tag-selectable.selected');
    const countSpan = document.getElementById('modalSelectedCount');
    if (countSpan) {
        countSpan.textContent = selectedTags.length;
    }
}

// ===== TAG PREVIEW FUNCTIONALITY FOR CALL LOG FORMS =====

/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
 */
function showAddTagModalFromCall() {
    const modalHtml = `
        <div class="modal fade" id="callLogTagModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">‡πÄ‡∏û‡∏¥‡πà‡∏° Tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Tab Navigation -->
                        <ul class="nav nav-tabs" id="tagModalTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="existing-tags-tab" data-bs-toggle="tab" data-bs-target="#existing-tags" type="button" role="tab">
                                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Tag ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="new-tag-tab" data-bs-toggle="tab" data-bs-target="#new-tag" type="button" role="tab">
                                    ‡∏™‡∏£‡πâ‡∏≤‡∏á Tag ‡πÉ‡∏´‡∏°‡πà
                                </button>
                            </li>
                        </ul>
                        
                        <!-- Tab Content -->
                        <div class="tab-content mt-3" id="tagModalTabContent">
                            <!-- Existing Tags Tab -->
                            <div class="tab-pane fade show active" id="existing-tags" role="tabpanel">
                                <div class="mb-3">
                                    <input type="text" class="form-control" id="tagSearchInput" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tag...">
                                </div>
                                <div id="existingTagsList" style="max-height: 300px; overflow-y: auto;">
                                    <!-- Tags will be loaded here -->
                                </div>
                            </div>
                            
                            <!-- New Tag Tab -->
                            <div class="tab-pane fade" id="new-tag" role="tabpanel">
                                <form>
                                    <div class="mb-3">
                                        <label for="newTagName" class="form-label">‡∏ä‡∏∑‡πà‡∏≠ Tag</label>
                                        <input type="text" class="form-control" id="newTagName" placeholder="‡∏ä‡∏∑‡πà‡∏≠ tag..." maxlength="50">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">‡∏™‡∏µ</label>
                                        <div class="d-flex flex-wrap gap-2">
                                            ${renderColorPicker()}
                                        </div>
                                        <input type="hidden" id="newTagColor" value="#007bff">
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                        <button type="button" class="btn btn-primary" onclick="addSelectedTagsToCallLog()">‡πÄ‡∏û‡∏¥‡πà‡∏° Tag</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // ‡∏•‡∏ö modal ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingModal = document.getElementById('callLogTagModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° modal ‡πÉ‡∏´‡∏°‡πà
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // ‡πÇ‡∏´‡∏•‡∏î existing tags
    loadExistingTagsForCallLog();
    
    // ‡πÅ‡∏™‡∏î‡∏á modal
    const modal = new bootstrap.Modal(document.getElementById('callLogTagModal'));
    modal.show();
    
    // Add search functionality
    document.getElementById('tagSearchInput').addEventListener('input', function() {
        filterCallLogTags(this.value);
    });
    
    // Add color picker functionality for new tag
    document.querySelectorAll('.color-picker').forEach(btn => {
        btn.addEventListener('click', function() {
            const color = this.getAttribute('data-color');
            selectCallLogTagColor(color);
        });
    });
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î Tags ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Call Log Modal
 */
async function loadExistingTagsForCallLog() {
    try {
        const response = await fetch('api/tags.php?action=user_tags');
        const data = await response.json();
        
        if (response.ok) {
            const container = document.getElementById('existingTagsList');
            let html = '';
            
            // User tags
            if (data.user_tags && data.user_tags.length > 0) {
                html += '<h6 class="text-muted mb-2">Tags ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h6>';
                data.user_tags.forEach(tag => {
                    html += `
                        <div class="tag-item mb-1" data-tag-name="${tag.tag_name.toLowerCase()}">
                            <span class="badge tag-selectable" 
                                  style="background-color: ${tag.tag_color}; color: ${getTextColor(tag.tag_color)}; cursor: pointer; padding: 8px 12px;"
                                  onclick="toggleCallLogTagSelection('${tag.tag_name}', '${tag.tag_color}', this)">
                                ${escapeHtml(tag.tag_name)} <small>(${tag.usage_count || 0})</small>
                            </span>
                        </div>
                    `;
                });
            }
            
            // Predefined tags
            if (data.predefined_tags && data.predefined_tags.length > 0) {
                html += '<h6 class="text-muted mb-2 mt-3">Tags ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</h6>';
                data.predefined_tags.forEach(tag => {
                    html += `
                        <div class="tag-item mb-1" data-tag-name="${tag.tag_name.toLowerCase()}">
                            <span class="badge tag-selectable" 
                                  style="background-color: ${tag.tag_color}; color: ${getTextColor(tag.tag_color)}; cursor: pointer; padding: 8px 12px;"
                                  onclick="toggleCallLogTagSelection('${tag.tag_name}', '${tag.tag_color}', this)">
                                ${escapeHtml(tag.tag_name)}
                            </span>
                        </div>
                    `;
                });
            }
            
            if (html === '') {
                html = '<p class="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tags ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>';
            }
            
            container.innerHTML = html;
        }
    } catch (error) {
        console.error('Error loading tags for call log:', error);
        document.getElementById('existingTagsList').innerHTML = '<p class="text-danger">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î tags</p>';
    }
}

/**
 * Toggle Tag Selection ‡πÉ‡∏ô Call Log Modal
 */
let selectedCallLogTags = [];

function toggleCallLogTagSelection(tagName, tagColor, element) {
    const index = selectedCallLogTags.findIndex(tag => tag.name === tagName);
    
    if (index > -1) {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selectedCallLogTags.splice(index, 1);
        element.style.border = '2px solid transparent';
        element.style.boxShadow = 'none';
    } else {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tag
        selectedCallLogTags.push({ name: tagName, color: tagColor });
        element.style.border = '3px solid #000';
        element.style.boxShadow = '0 0 0 1px #000';
    }
}

/**
 * ‡∏Å‡∏£‡∏≠‡∏á Tags ‡πÉ‡∏ô Call Log Modal
 */
function filterCallLogTags(searchTerm) {
    const tagItems = document.querySelectorAll('#existingTagsList .tag-item');
    const lowerSearchTerm = searchTerm.toLowerCase();
    
    tagItems.forEach(item => {
        const tagName = item.getAttribute('data-tag-name');
        if (tagName.includes(lowerSearchTerm)) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
}

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tag ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Call Log Modal
 */
function selectCallLogTagColor(color) {
    document.getElementById('newTagColor').value = color;
    
    // Update visual feedback
    document.querySelectorAll('.color-picker').forEach(btn => {
        btn.style.border = '2px solid #ddd';
    });
    document.querySelector(`[data-color="${color}"]`).style.border = '3px solid #000';
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° Tags ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Call Log Preview
 */
function addSelectedTagsToCallLog() {
    // Add selected existing tags
    selectedCallLogTags.forEach(tag => {
        addCallLogTag(tag.name, tag.color);
    });
    
    // Add new tag if specified
    const newTagName = document.getElementById('newTagName').value.trim();
    const newTagColor = document.getElementById('newTagColor').value;
    
    if (newTagName) {
        addCallLogTag(newTagName, newTagColor);
    }
    
    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('callLogTagModal'));
    modal.hide();
    
    // Clear selections
    selectedCallLogTags = [];
}

// Global array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö tags ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
window.callLogTags = window.callLogTags || [];

/**
 * ‡πÅ‡∏™‡∏î‡∏á Tag Preview ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
 */
function updateCallTagsPreview() {
    const previewContainer = document.getElementById('callTagsPreview');
    if (!previewContainer) return;
    
    if (window.callLogTags.length === 0) {
        previewContainer.innerHTML = '<small class="text-muted">Tags ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</small>';
        return;
    }
    
    let html = '';
    window.callLogTags.forEach((tag, index) => {
        html += `
            <span class="badge me-1 mb-1" style="background-color: ${tag.color}; color: ${getTextColor(tag.color)};">
                ${escapeHtml(tag.name)}
                <i class="fas fa-times ms-1" onclick="removeCallLogTag(${index})" style="cursor: pointer;" title="‡∏•‡∏ö tag"></i>
            </span>
        `;
    });
    
    previewContainer.innerHTML = html;
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° Tag ‡πÉ‡∏ô Preview (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
 */
function addCallLogTag(tagName, tagColor) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ tag ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingTag = window.callLogTags.find(tag => tag.name === tagName);
    if (existingTag) {
        showErrorMessage(`Tag "${tagName}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
        return;
    }
    
    window.callLogTags.push({
        name: tagName,
        color: tagColor || '#007bff'
    });
    
    updateCallTagsPreview();
    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á notification ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏ß‡∏°
    // showSuccessMessage(`‡πÄ‡∏û‡∏¥‡πà‡∏° Tag "${tagName}" ‡πÅ‡∏•‡πâ‡∏ß`);
}

/**
 * ‡∏•‡∏ö Tag ‡∏à‡∏≤‡∏Å Preview
 */
function removeCallLogTag(index) {
    if (index >= 0 && index < window.callLogTags.length) {
        const removedTag = window.callLogTags.splice(index, 1)[0];
        updateCallTagsPreview();
        // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á notification ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö preview
        // showSuccessMessage(`‡∏•‡∏ö Tag "${removedTag.name}" ‡πÅ‡∏•‡πâ‡∏ß`);
    }
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á Tags Preview (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡∏°‡πà)
 */
function clearCallLogTags() {
    window.callLogTags = [];
    updateCallTagsPreview();
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Tags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
async function saveCallLogTags(customerId) {
    if (!window.callLogTags || window.callLogTags.length === 0) {
        return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ tags ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    }
    
    try {
        const tagCount = window.callLogTags.length;
        
        for (const tag of window.callLogTags) {
            // ‡∏™‡πà‡∏á showNotification = false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á notification ‡πÅ‡∏¢‡∏Å
            await addCustomerTag(customerId, tag.name, tag.color, false);
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏£‡∏ß‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if (tagCount === 1) {
            showSuccessMessage(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Tag ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } else {
            showSuccessMessage(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${tagCount} Tags ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        }
        
        // ‡∏•‡πâ‡∏≤‡∏á preview ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        clearCallLogTags();
        return true;
    } catch (error) {
        console.error('Error saving call log tags:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Tags');
        return false;
    }
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
 */
function getTextColor(backgroundColor) {
    // ‡πÅ‡∏õ‡∏•‡∏á hex ‡πÄ‡∏õ‡πá‡∏ô RGB
    const hex = backgroundColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì brightness
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    
    // ‡∏ñ‡πâ‡∏≤ brightness ‡∏°‡∏≤‡∏Å ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏î‡∏≥ ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
    return brightness > 128 ? '#000000' : '#ffffff';
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° tag ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£ (Preview mode)
 */
function showAddTagModalForCallLog() {
    const modalHtml = `
        <div class="modal fade" id="addTagCallLogModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">‡πÄ‡∏û‡∏¥‡πà‡∏° Tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i> 
                            Tag ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        </div>
                        <form id="addTagCallLogForm">
                            <div class="mb-3">
                                <label for="tagNameCallLog" class="form-label">‡∏ä‡∏∑‡πà‡∏≠ Tag</label>
                                <input type="text" class="form-control" id="tagNameCallLog" placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ tag" required>
                                <div class="form-text">‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å tags ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ:</div>
                                <div id="suggestedTagsCallLog" class="mt-2">
                                    ${renderSuggestedTags()}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="tagColorCallLog" class="form-label">‡∏™‡∏µ</label>
                                <div class="d-flex flex-wrap gap-2">
                                    ${renderColorPickerForCallLog()}
                                </div>
                                <input type="hidden" id="selectedColorCallLog" value="#007bff">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                        <button type="button" class="btn btn-primary" onclick="submitAddTagForCallLog()">‡πÄ‡∏û‡∏¥‡πà‡∏° Tag</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // ‡∏•‡∏ö modal ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingModal = document.getElementById('addTagCallLogModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° modal ‡πÉ‡∏´‡∏°‡πà
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // ‡πÅ‡∏™‡∏î‡∏á modal
    const modal = new bootstrap.Modal(document.getElementById('addTagCallLogModal'));
    modal.show();
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Color Picker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Call Log Modal
 */
function renderColorPickerForCallLog() {
    let html = '';
    TAG_COLORS.forEach((color, index) => {
        const isSelected = index === 0 ? 'selected' : '';
        html += `
            <div class="color-option ${isSelected}" 
                 style="background-color: ${color}; width: 30px; height: 30px; border-radius: 50%; cursor: pointer; border: 3px solid ${index === 0 ? '#000' : 'transparent'};"
                 onclick="selectColorForCallLog('${color}', this)">
            </div>
        `;
    });
    return html;
}

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Call Log Tag
 */
function selectColorForCallLog(color, element) {
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÄ‡∏Å‡πà‡∏≤
    document.querySelectorAll('#addTagCallLogModal .color-option').forEach(option => {
        option.style.border = '3px solid transparent';
        option.classList.remove('selected');
    });
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà
    element.style.border = '3px solid #000';
    element.classList.add('selected');
    document.getElementById('selectedColorCallLog').value = color;
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Tag ‡πÉ‡∏ô Preview (Call Log Modal)
 */
function submitAddTagForCallLog() {
    const tagName = document.getElementById('tagNameCallLog').value.trim();
    const tagColor = document.getElementById('selectedColorCallLog').value;
    
    if (!tagName) {
        showErrorMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Tag');
        return;
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Preview
    addCallLogTag(tagName, tagColor);
    
    // ‡∏õ‡∏¥‡∏î modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('addTagCallLogModal'));
    modal.hide();
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    document.getElementById('addTagCallLogForm').reset();
}

// ‡πÄ‡∏Å‡πá‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
function toggleTagSelection(checkboxId) {
    const checkbox = document.getElementById(checkboxId);
    if (checkbox) {
        checkbox.checked = !checkbox.checked;
        updateModalSelectedCount();
    }
}

function restoreModalTagState() {
    try {
        const savedTags = sessionStorage.getItem('selectedTagFilters');
        if (savedTags) {
            const selectedTags = JSON.parse(savedTags);
            selectedTags.forEach(tagName => {
                const tagElement = document.querySelector(`#modalTagFilterOptions .tag-selectable[data-tag-name="${tagName}"]`);
                if (tagElement) {
                    tagElement.classList.add('selected');
                    const tagColor = tagElement.getAttribute('data-tag-color');
                    const oppositeColor = getOppositeColor(tagColor);
                    tagElement.style.border = `3px solid ${oppositeColor}`;
                    tagElement.style.boxShadow = `0 0 0 1px ${oppositeColor}`;
                }
            });
            updateModalSelectedCountNew();
        }
    } catch (error) {
        console.error('Error restoring modal tag state:', error);
    }
}

function clearModalTagFilter() {
    const tagOptions = document.querySelectorAll('#modalTagFilterOptions .tag-selectable');
    tagOptions.forEach(option => {
        option.classList.remove('selected');
        option.style.border = '2px solid transparent';
        option.style.boxShadow = 'none';
    });
    updateModalSelectedCountNew();
}

function applyModalTagFilter() {
    // ‡∏î‡∏∂‡∏á selected tags
    const selectedTags = Array.from(document.querySelectorAll('#modalTagFilterOptions .tag-selectable.selected'))
        .map(element => element.dataset.tagName);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    sessionStorage.setItem('selectedTagFilters', JSON.stringify(selectedTags));
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï badge count
    const countBadge = document.getElementById('selectedTagsCount');
    if (countBadge) {
        countBadge.textContent = selectedTags.length;
    }
    
    // ‡∏õ‡∏¥‡∏î modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('tagFilterModal'));
    modal.hide();
    
    // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    if (selectedTags.length > 0) {
        searchCustomersByTags(selectedTags).then(customers => {
            // ‡πÉ‡∏ä‡πâ renderStandardTable ‡πÅ‡∏ó‡∏ô renderAllCustomersTable ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            if (typeof renderStandardTable === 'function') {
                renderStandardTable(customers, 'allCustomersTable', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ tags ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï badge count
                const countBadge = document.getElementById('allCustomersCount');
                if (countBadge) {
                    countBadge.textContent = customers.length;
                }
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° pagination
                setTimeout(() => {
                    const table = document.querySelector('#allCustomersTable table');
                    const paginationContainer = document.getElementById('allCustomersTable-pagination');
                    if (table && paginationContainer) {
                        paginationContainer.innerHTML = ''; // ‡∏•‡∏ö pagination ‡πÄ‡∏Å‡πà‡∏≤
                        if (typeof paginateTable === 'function') {
                            paginateTable(table, 'allCustomersTable-pagination', 10, 'customers_page_allCustomersTable');
                        }
                    }
                }, 100);
            } else {
                console.error('renderStandardTable function not found');
            }
        }).catch(error => {
            console.error('Error applying tag filter:', error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á tags');
        });
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (typeof loadAllCustomers === 'function') {
            loadAllCustomers();
        }
    }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ tag filters ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
 */
function loadPreviousTagFilters() {
    setTimeout(() => {
        try {
            const savedTags = sessionStorage.getItem('selectedTagFilters');
            if (savedTags) {
                const selectedTags = JSON.parse(savedTags);
                
                selectedTags.forEach(tagName => {
                    const tagElement = document.querySelector(`#modalTagFilterOptions .tag-selectable[data-tag-name="${tagName}"]`);
                    if (tagElement) {
                        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tag
                        tagElement.classList.add('selected');
                        const tagColor = tagElement.dataset.tagColor || '#007bff';
                        const oppositeColor = getOppositeColor(tagColor);
                        tagElement.style.border = `3px solid ${oppositeColor}`;
                        tagElement.style.boxShadow = `0 0 0 1px ${oppositeColor}`;
                    }
                });
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï count
                updateModalSelectedCountNew();
            }
        } catch (error) {
            console.error('Error loading previous tag filters:', error);
        }
    }, 500); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ modal ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
}

// ‡πÇ‡∏´‡∏•‡∏î user tags ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
document.addEventListener('DOMContentLoaded', function() {
    loadUserTags();
    
    // ‡πÇ‡∏´‡∏•‡∏î tag filter options ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ element
    setTimeout(() => {
        if (document.getElementById('tagFilterOptions')) {
            loadTagFilterOptions();
        }
    }, 1000);
});
