<?php
/**
 * Test Import Debug Step by Step - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡πÅ‡∏ö‡∏ö debug ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô importSalesFromCSV method
 */

echo "<h1>üîç Test Import Debug Step by Step - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡πÅ‡∏ö‡∏ö debug ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô</h1>";

// 1. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
echo "<h2>1. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</h2>";
try {
    require_once 'config/config.php';
    require_once 'app/core/Database.php';
    require_once 'app/services/ImportExportService.php';
    echo "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
} catch (Exception $e) {
    echo "‚ùå Error loading files: " . $e->getMessage() . "<br>";
    exit;
}

// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Service ‡πÅ‡∏•‡∏∞ Database
echo "<h2>2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Service ‡πÅ‡∏•‡∏∞ Database</h2>";
try {
    $service = new ImportExportService();
    $db = new Database();
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Service ‡πÅ‡∏•‡∏∞ Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
} catch (Exception $e) {
    echo "‚ùå Error creating objects: " . $e->getMessage() . "<br>";
    exit;
}

// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
echo "<h2>3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
try {
    $uploadDir = __DIR__ . '/uploads/';
    if (!is_dir($uploadDir)) {
        mkdir($uploadDir, 0755, true);
    }
    
    $testFile = $uploadDir . 'test_debug_step.csv';
    $csvContent = "‡∏ä‡∏∑‡πà‡∏≠,‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•,‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå,‡∏≠‡∏µ‡πÄ‡∏°‡∏•,‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà,‡πÄ‡∏Ç‡∏ï,‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î,‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå,‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏à‡∏≥‡∏ô‡∏ß‡∏ô,‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô,‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠,‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏\n";
    $csvContent .= "‡∏ó‡∏î‡∏™‡∏≠‡∏ö,‡∏£‡∏∞‡∏ö‡∏ö,0812345678,test@example.com,123 ‡∏ñ.‡∏ó‡∏î‡∏™‡∏≠‡∏ö,‡πÄ‡∏Ç‡∏ï‡∏ó‡∏î‡∏™‡∏≠‡∏ö,‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö,10000,‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö,1,1000,2024-01-15,‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö\n";
    
    file_put_contents($testFile, $csvContent);
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    echo "‡πÑ‡∏ü‡∏•‡πå: {$testFile}<br>";
    echo "‡∏Ç‡∏ô‡∏≤‡∏î: " . filesize($testFile) . " bytes<br>";
} catch (Exception $e) {
    echo "‚ùå CSV Creation Error: " . $e->getMessage() . "<br>";
    exit;
}

// 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
echo "<h2>4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô</h2>";

try {
    // 4.1 ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
    echo "<h3>4.1 ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå</h3>";
    $content = file_get_contents($testFile);
    if ($content === false) {
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ<br>";
        exit;
    }
    echo "‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    echo "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: " . strlen($content) . " bytes<br>";
    
    // 4.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö encoding
    echo "<h3>4.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö encoding</h3>";
    $encoding = mb_detect_encoding($content, ['UTF-8', 'ISO-8859-11', 'Windows-874'], true);
    if (!$encoding) {
        $encoding = 'UTF-8';
    }
    echo "‚úÖ Encoding ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: " . $encoding . "<br>";
    
    // 4.3 ‡πÅ‡∏õ‡∏•‡∏á encoding ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if ($encoding !== 'UTF-8') {
        $content = mb_convert_encoding($content, 'UTF-8', $encoding);
        echo "‚úÖ ‡πÅ‡∏õ‡∏•‡∏á encoding ‡πÄ‡∏õ‡πá‡∏ô UTF-8 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    // 4.4 ‡∏•‡∏ö BOM
    $content = preg_replace('/^\xEF\xBB\xBF/', '', $content);
    echo "‚úÖ ‡∏•‡∏ö BOM ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // 4.5 ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    echo "<h3>4.3 ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î</h3>";
    $lines = explode("\n", $content);
    echo "‚úÖ ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . count($lines) . " ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î<br>";
    
    // 4.6 ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
    $lines = array_filter($lines, function($line) {
        return trim($line) !== '';
    });
    echo "‚úÖ ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . count($lines) . " ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á<br>";
    
    if (empty($lines)) {
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV<br>";
        exit;
    }
    
    // 4.7 ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• header
    echo "<h3>4.4 ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• header</h3>";
    $headerLine = array_shift($lines);
    $headers = str_getcsv($headerLine);
    echo "‚úÖ ‡πÅ‡∏¢‡∏Å header ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . json_encode($headers) . "<br>";
    
    // 4.8 ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î header
    $headers = array_map(function($header) {
        return trim($header);
    }, $headers);
    echo "‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î header ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . json_encode($headers) . "<br>";
    
    // 4.9 ‡πÅ‡∏°‡∏õ header ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    echo "<h3>4.5 ‡πÅ‡∏°‡∏õ header ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>";
    
    // ‡πÉ‡∏ä‡πâ reflection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á private method
    $reflection = new ReflectionClass($service);
    $getSalesColumnMapMethod = $reflection->getMethod('getSalesColumnMap');
    $getSalesColumnMapMethod->setAccessible(true);
    $columnMap = $getSalesColumnMapMethod->invoke($service);
    
    echo "‚úÖ Column map: " . json_encode($columnMap) . "<br>";
    
    $mappedHeaders = [];
    foreach ($headers as $header) {
        if (isset($columnMap[$header])) {
            $mappedHeaders[] = $columnMap[$header];
        } else {
            $mappedHeaders[] = null;
        }
    }
    echo "‚úÖ Mapped headers: " . json_encode($mappedHeaders) . "<br>";
    
    // 4.10 ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    echo "<h3>4.6 ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>";
    $rowNumber = 1; // Header row
    foreach ($lines as $line) {
        $rowNumber++;
        echo "‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {$rowNumber}<br>";
        
        $data = str_getcsv($line);
        echo "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ñ‡∏ß: " . json_encode($data) . "<br>";
        
        $salesData = [];
        foreach ($mappedHeaders as $index => $column) {
            if ($column && isset($data[$index])) {
                $value = trim($data[$index]);
                $salesData[$column] = $value;
            }
        }
        echo "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡∏õ‡πÅ‡∏•‡πâ‡∏ß: " . json_encode($salesData) . "<br>";
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (empty($salesData['first_name'])) {
            echo "‚ùå ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {$rowNumber}: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô<br>";
            continue;
        }
        
        if (empty($salesData['phone'])) {
            echo "‚ùå ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {$rowNumber}: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô<br>";
            continue;
        }
        
        echo "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {$rowNumber} ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö<br>";
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        $existingCustomer = $db->fetchOne(
            "SELECT customer_id, first_name, last_name FROM customers WHERE phone = ?",
            [$salesData['phone']]
        );
        
        if ($existingCustomer) {
            echo "‚úÖ ‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: " . $existingCustomer['customer_id'] . "<br>";
        } else {
            echo "‚úÖ ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå: " . $salesData['phone'] . "<br>";
        }
        
        break; // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏Ñ‡πà‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
    }
    
    echo "‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
} catch (Exception $e) {
    echo "‚ùå Error in step-by-step processing: " . $e->getMessage() . "<br>";
    echo "Stack trace: <pre>" . $e->getTraceAsString() . "</pre><br>";
}

// 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡∏à‡∏£‡∏¥‡∏á
echo "<h2>5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡∏à‡∏£‡∏¥‡∏á</h2>";
try {
    echo "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import...<br>";
    $results = $service->importSalesFromCSV($testFile);
    echo "‚úÖ Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    echo "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: <pre>" . print_r($results, true) . "</pre><br>";
} catch (Exception $e) {
    echo "‚ùå Import Error: " . $e->getMessage() . "<br>";
    echo "Stack trace: <pre>" . $e->getTraceAsString() . "</pre><br>";
}

// 6. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
echo "<h2>6. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î</h2>";
try {
    if (file_exists($testFile)) {
        unlink($testFile);
        echo "‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
} catch (Exception $e) {
    echo "‚ùå Cleanup Error: " . $e->getMessage() . "<br>";
}

echo "<h2>üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
echo "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á<br>";
?> 