<?php
/**
 * Debug 500 Error - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 500 error ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á
 */

// Start session
session_start();

// Set error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);

// Load configuration
require_once 'config/config.php';

echo "<h1>üîç Debug 500 Error - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á</h1>";

try {
    echo "<h2>1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå</h2>";
    
    // Test 1: Check if files exist
    $files = [
        'config/config.php',
        'app/controllers/ImportExportController.php',
        'app/services/ImportExportService.php',
        'app/core/Database.php'
    ];
    
    foreach ($files as $file) {
        if (file_exists($file)) {
            echo "‚úÖ {$file} - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà<br>";
        } else {
            echo "‚ùå {$file} - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà<br>";
        }
    }
    
    echo "<h2>2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ImportExportService</h2>";
    
    // Test 2: Create ImportExportService
    try {
        require_once 'app/services/ImportExportService.php';
        $service = new ImportExportService();
        echo "‚úÖ ImportExportService ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
        
        // Test database connection
        $db = $service->getDatabase();
        if ($db) {
            echo "‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
        } else {
            echo "‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß<br>";
        }
        
    } catch (Exception $e) {
        echo "‚ùå ImportExportService Error: " . $e->getMessage() . "<br>";
        echo "Stack trace: <pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    echo "<h2>3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ImportExportController</h2>";
    
    // Test 3: Create ImportExportController
    try {
        require_once 'app/controllers/ImportExportController.php';
        $controller = new ImportExportController();
        echo "‚úÖ ImportExportController ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    } catch (Exception $e) {
        echo "‚ùå ImportExportController Error: " . $e->getMessage() . "<br>";
        echo "Stack trace: <pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    echo "<h2>4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>";
    
    // Test 4: Check file permissions
    $uploadDir = __DIR__ . '/uploads/';
    if (!is_dir($uploadDir)) {
        if (mkdir($uploadDir, 0755, true)) {
            echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
        } else {
            echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡πÑ‡∏î‡πâ<br>";
        }
    } else {
        echo "‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß<br>";
    }
    
    // Test write permissions
    $testFile = $uploadDir . 'debug_test.txt';
    if (file_put_contents($testFile, 'test') !== false) {
        echo "‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ<br>";
        unlink($testFile);
    } else {
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ<br>";
    }
    
    echo "<h2>5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PHP</h2>";
    
    // Test 5: Check PHP settings
    echo "PHP Version: " . phpversion() . "<br>";
    echo "Memory Limit: " . ini_get('memory_limit') . "<br>";
    echo "Max Upload Size: " . ini_get('upload_max_filesize') . "<br>";
    echo "Max Post Size: " . ini_get('post_max_size') . "<br>";
    echo "Max Execution Time: " . ini_get('max_execution_time') . "<br>";
    echo "Display Errors: " . (ini_get('display_errors') ? 'On' : 'Off') . "<br>";
    echo "Log Errors: " . (ini_get('log_errors') ? 'On' : 'Off') . "<br>";
    
    echo "<h2>6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session</h2>";
    
    // Test 6: Check session
    if (isset($_SESSION['user_id'])) {
        echo "‚úÖ Session user_id: " . $_SESSION['user_id'] . "<br>";
    } else {
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Session user_id<br>";
        echo "Session data: <pre>" . print_r($_SESSION, true) . "</pre>";
    }
    
    echo "<h2>7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ importSales method</h2>";
    
    // Test 7: Test importSales method (without file upload)
    try {
        // Simulate POST request
        $_SERVER['REQUEST_METHOD'] = 'POST';
        
        // Test without file
        ob_start();
        $controller->importSales();
        $output = ob_get_clean();
        
        echo "‚úÖ importSales method ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)<br>";
        echo "Output: " . htmlspecialchars($output) . "<br>";
        
    } catch (Exception $e) {
        echo "‚ùå importSales Error: " . $e->getMessage() . "<br>";
        echo "Stack trace: <pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    echo "<h2>8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error Log</h2>";
    
    // Test 8: Check error log
    $errorLog = ini_get('error_log');
    if ($errorLog) {
        echo "Error Log Path: {$errorLog}<br>";
        if (file_exists($errorLog)) {
            echo "‚úÖ Error Log ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà<br>";
            $logSize = filesize($errorLog);
            echo "Error Log Size: " . number_format($logSize) . " bytes<br>";
            
            if ($logSize > 0) {
                echo "Last 10 lines of error log:<br>";
                $lines = file($errorLog);
                $lastLines = array_slice($lines, -10);
                echo "<pre>" . htmlspecialchars(implode('', $lastLines)) . "</pre>";
            }
        } else {
            echo "‚ùå Error Log ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà<br>";
        }
    } else {
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Error Log<br>";
    }
    
    echo "<h2>‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
    echo "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 500 error ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:<br>";
    echo "1. Error Log ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå<br>";
    echo "2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PHP ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå<br>";
    echo "3. ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå<br>";
    echo "4. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•<br>";
    
} catch (Exception $e) {
    echo "<h2>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
    echo "Error: " . $e->getMessage() . "<br>";
    echo "Stack trace: <pre>" . $e->getTraceAsString() . "</pre>";
}
?> 