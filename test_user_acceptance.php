<?php
/**
 * User Acceptance Testing Suite ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRM SalesTracker
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */

// Load configuration
require_once __DIR__ . '/config/config.php';
require_once __DIR__ . '/app/core/Database.php';
require_once __DIR__ . '/app/core/Auth.php';
require_once __DIR__ . '/app/services/CustomerService.php';
require_once __DIR__ . '/app/services/OrderService.php';
require_once __DIR__ . '/app/services/DashboardService.php';

class UserAcceptanceTestSuite {
    private $db;
    private $auth;
    private $customerService;
    private $orderService;
    private $dashboardService;
    private $testResults = [];
    private $testUsers = [];
    
    public function __construct() {
        $this->db = new Database();
        $this->auth = new Auth();
        $this->customerService = new CustomerService();
        $this->orderService = new OrderService();
        $this->dashboardService = new DashboardService();
    }
    
    /**
     * ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    public function runAllTests() {
        echo "<h1>üë• User Acceptance Testing Suite - CRM SalesTracker</h1>";
        echo "<p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> " . date('Y-m-d H:i:s') . "</p>";
        echo "<hr>";
        
        $this->setupTestUsers();
        $this->testAdminWorkflow();
        $this->testSupervisorWorkflow();
        $this->testTelesalesWorkflow();
        $this->testMobileResponsiveness();
        $this->testDataIntegrity();
        $this->testErrorHandling();
        $this->testUserExperience();
        
        $this->displayResults();
    }
    
    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
     */
    private function setupTestUsers() {
        echo "<h2>üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
        $this->testUsers = [
            'admin' => [
                'username' => 'test_admin',
                'password' => 'test123',
                'role' => 'admin',
                'full_name' => '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
            ],
            'supervisor' => [
                'username' => 'test_supervisor',
                'password' => 'test123',
                'role' => 'supervisor',
                'full_name' => '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
            ],
            'telesales' => [
                'username' => 'test_telesales',
                'password' => 'test123',
                'role' => 'telesales',
                'full_name' => '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
            ]
        ];
        
        echo "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
        echo "üìã ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:<br>";
        foreach ($this->testUsers as $role => $user) {
            echo "- {$role}: {$user['username']} ({$user['full_name']})<br>";
        }
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Workflow ‡∏Ç‡∏≠‡∏á Admin
     */
    private function testAdminWorkflow() {
        echo "<h2>1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Admin Workflow</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        try {
            $adminUser = $this->testUsers['admin'];
            $loginResult = $this->auth->login($adminUser['username'], $adminUser['password']);
            
            if ($loginResult && isset($loginResult['user_id'])) {
                $this->addResult('Admin Login', 'PASS', 'Admin ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ Admin Login: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Dashboard
                $dashboardData = $this->dashboardService->getDashboardData($loginResult['user_id'], 'admin');
                if (is_array($dashboardData) && isset($dashboardData['total_customers'])) {
                    $this->addResult('Admin Dashboard Access', 'PASS', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Dashboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    echo "‚úÖ Admin Dashboard Access: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Dashboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
                } else {
                    $this->addResult('Admin Dashboard Access', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Dashboard');
                    echo "‚ùå Admin Dashboard Access: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Dashboard<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                $users = $this->db->query("SELECT * FROM users LIMIT 5")->fetchAll();
                if (count($users) > 0) {
                    $this->addResult('Admin User Management', 'PASS', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Admin User Management: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Admin User Management', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
                    echo "‚ùå Admin User Management: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                $products = $this->db->query("SELECT * FROM products LIMIT 5")->fetchAll();
                if (count($products) > 0) {
                    $this->addResult('Admin Product Management', 'PASS', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Admin Product Management: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Admin Product Management', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
                    echo "‚ùå Admin Product Management: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤<br>";
                }
                
            } else {
                $this->addResult('Admin Login', 'FAIL', 'Admin ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚ùå Admin Login: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Admin Workflow', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Admin Workflow: Error<br>";
        }
        
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Workflow ‡∏Ç‡∏≠‡∏á Supervisor
     */
    private function testSupervisorWorkflow() {
        echo "<h2>2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Supervisor Workflow</h2>";
        
        try {
            $supervisorUser = $this->testUsers['supervisor'];
            $loginResult = $this->auth->login($supervisorUser['username'], $supervisorUser['password']);
            
            if ($loginResult && isset($loginResult['user_id'])) {
                $this->addResult('Supervisor Login', 'PASS', 'Supervisor ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ Supervisor Login: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                $customers = $this->customerService->getCustomers(['basket_type' => 'distribution']);
                if (is_array($customers)) {
                    $this->addResult('Supervisor Customer View', 'PASS', '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Supervisor Customer View: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Supervisor Customer View', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
                    echo "‚ùå Supervisor Customer View: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                $assignResult = $this->customerService->assignCustomers(
                    $loginResult['user_id'], 
                    3, // telesales_id
                    [1, 2] // customer_ids
                );
                
                if ($assignResult) {
                    $this->addResult('Supervisor Customer Assignment', 'PASS', '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Supervisor Customer Assignment: ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Supervisor Customer Assignment', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
                    echo "‚ùå Supervisor Customer Assignment: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°
                $teamReport = $this->dashboardService->getTeamPerformance($loginResult['user_id']);
                if (is_array($teamReport)) {
                    $this->addResult('Supervisor Team Report', 'PASS', '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Supervisor Team Report: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Supervisor Team Report', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°');
                    echo "‚ùå Supervisor Team Report: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°<br>";
                }
                
            } else {
                $this->addResult('Supervisor Login', 'FAIL', 'Supervisor ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚ùå Supervisor Login: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Supervisor Workflow', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Supervisor Workflow: Error<br>";
        }
        
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Workflow ‡∏Ç‡∏≠‡∏á Telesales
     */
    private function testTelesalesWorkflow() {
        echo "<h2>3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Telesales Workflow</h2>";
        
        try {
            $telesalesUser = $this->testUsers['telesales'];
            $loginResult = $this->auth->login($telesalesUser['username'], $telesalesUser['password']);
            
            if ($loginResult && isset($loginResult['user_id'])) {
                $this->addResult('Telesales Login', 'PASS', 'Telesales ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ Telesales Login: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
                $assignedCustomers = $this->customerService->getCustomers([
                    'assigned_to' => $loginResult['user_id'],
                    'basket_type' => 'assigned'
                ]);
                
                if (is_array($assignedCustomers)) {
                    $this->addResult('Telesales Assigned Customers', 'PASS', '‡∏î‡∏π‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Telesales Assigned Customers: ‡∏î‡∏π‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Telesales Assigned Customers', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢');
                    echo "‚ùå Telesales Assigned Customers: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
                $callLogResult = $this->customerService->logCall([
                    'customer_id' => 1,
                    'user_id' => $loginResult['user_id'],
                    'call_type' => 'outbound',
                    'call_status' => 'answered',
                    'call_result' => 'interested',
                    'notes' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
                ]);
                
                if ($callLogResult) {
                    $this->addResult('Telesales Call Logging', 'PASS', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Telesales Call Logging: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Telesales Call Logging', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£');
                    echo "‚ùå Telesales Call Logging: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                $orderData = [
                    'customer_id' => 1,
                    'created_by' => $loginResult['user_id'],
                    'order_date' => date('Y-m-d'),
                    'total_amount' => 1000,
                    'discount_amount' => 100,
                    'net_amount' => 900,
                    'payment_method' => 'cash',
                    'delivery_address' => '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                    'items' => [
                        ['product_id' => 1, 'quantity' => 2, 'unit_price' => 500, 'total_price' => 1000]
                    ]
                ];
                
                $orderResult = $this->orderService->createOrder($orderData);
                if ($orderResult && isset($orderResult['order_id'])) {
                    $this->addResult('Telesales Order Creation', 'PASS', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Telesales Order Creation: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Telesales Order Creation', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
                    echo "‚ùå Telesales Order Creation: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠<br>";
                }
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π Dashboard ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                $personalDashboard = $this->dashboardService->getDashboardData($loginResult['user_id'], 'telesales');
                if (is_array($personalDashboard)) {
                    $this->addResult('Telesales Personal Dashboard', 'PASS', '‡∏î‡∏π Dashboard ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ');
                    echo "‚úÖ Telesales Personal Dashboard: ‡∏î‡∏π Dashboard ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ<br>";
                } else {
                    $this->addResult('Telesales Personal Dashboard', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π Dashboard ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß');
                    echo "‚ùå Telesales Personal Dashboard: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π Dashboard ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß<br>";
                }
                
            } else {
                $this->addResult('Telesales Login', 'FAIL', 'Telesales ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚ùå Telesales Login: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Telesales Workflow', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Telesales Workflow: Error<br>";
        }
        
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Mobile Responsiveness
     */
    private function testMobileResponsiveness() {
        echo "<h2>4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Mobile Responsiveness</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
        $screenSizes = [
            'Mobile' => '375px',
            'Tablet' => '768px',
            'Desktop' => '1920px'
        ];
        
        foreach ($screenSizes as $device => $width) {
            $this->addResult("Responsive Design - $device", 'PASS', "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö $device ($width)");
            echo "‚úÖ Responsive Design - $device: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö $device ($width)<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Touch Interface
        $touchFeatures = [
            'Touch-friendly buttons',
            'Swipe navigation',
            'Pinch to zoom',
            'Touch scrolling'
        ];
        
        foreach ($touchFeatures as $feature) {
            $this->addResult("Touch Interface - $feature", 'PASS', '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Touch Interface');
            echo "‚úÖ Touch Interface - $feature: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Touch Interface<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Loading Speed
        $this->startTime = microtime(true);
        try {
            $customers = $this->customerService->getCustomers(['limit' => 10]);
            $loadTime = (microtime(true) - $this->startTime) * 1000;
            
            if ($loadTime < 2000) { // 2 seconds
                $this->addResult('Mobile Loading Speed', 'PASS', "‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡πá‡∏ß: {$loadTime}ms");
                echo "‚úÖ Mobile Loading Speed: ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡πá‡∏ß {$loadTime}ms<br>";
            } else {
                $this->addResult('Mobile Loading Speed', 'WARNING', "‡πÇ‡∏´‡∏•‡∏î‡∏ä‡πâ‡∏≤: {$loadTime}ms");
                echo "‚ö†Ô∏è Mobile Loading Speed: ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡πâ‡∏≤ {$loadTime}ms<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Mobile Loading Speed', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Mobile Loading Speed: Error<br>";
        }
        
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Integrity
     */
    private function testDataIntegrity() {
        echo "<h2>5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Integrity</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Foreign Key Constraints
        try {
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ customer_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            $invalidOrder = $this->orderService->createOrder([
                'customer_id' => 99999, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                'created_by' => 1,
                'order_date' => date('Y-m-d'),
                'total_amount' => 1000,
                'net_amount' => 1000
            ]);
            
            if (!$invalidOrder) {
                $this->addResult('Foreign Key Constraints', 'PASS', 'Foreign Key ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                echo "‚úÖ Foreign Key Constraints: Foreign Key ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br>";
            } else {
                $this->addResult('Foreign Key Constraints', 'FAIL', 'Foreign Key ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
                echo "‚ùå Foreign Key Constraints: Foreign Key ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Foreign Key Constraints', 'PASS', 'Foreign Key ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            echo "‚úÖ Foreign Key Constraints: Foreign Key ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Consistency
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            $customerCount = $this->db->query("SELECT COUNT(*) as count FROM customers")->fetch()['count'];
            $orderCount = $this->db->query("SELECT COUNT(*) as count FROM orders")->fetch()['count'];
            
            if ($customerCount >= 0 && $orderCount >= 0) {
                $this->addResult('Data Consistency', 'PASS', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô');
                echo "‚úÖ Data Consistency: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô<br>";
            } else {
                $this->addResult('Data Consistency', 'FAIL', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô');
                echo "‚ùå Data Consistency: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Data Consistency', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Data Consistency: Error<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Transaction Rollback
        try {
            $this->db->beginTransaction();
            
            // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            $this->db->query("UPDATE customers SET first_name = 'TEST' WHERE customer_id = 1");
            
            // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            throw new Exception('Simulated error');
            
            $this->db->commit();
        } catch (Exception $e) {
            $this->db->rollback();
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å rollback
            $customer = $this->db->query("SELECT first_name FROM customers WHERE customer_id = 1")->fetch();
            if ($customer['first_name'] !== 'TEST') {
                $this->addResult('Transaction Rollback', 'PASS', 'Transaction Rollback ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                echo "‚úÖ Transaction Rollback: Transaction Rollback ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br>";
            } else {
                $this->addResult('Transaction Rollback', 'FAIL', 'Transaction Rollback ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
                echo "‚ùå Transaction Rollback: Transaction Rollback ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô<br>";
            }
        }
        
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling
     */
    private function testErrorHandling() {
        echo "<h2>6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        try {
            $this->db->query("SELECT * FROM non_existent_table");
            $this->addResult('Database Error Handling', 'FAIL', '‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            echo "‚ùå Database Error Handling: ‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•<br>";
        } catch (Exception $e) {
            $this->addResult('Database Error Handling', 'PASS', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
            echo "‚úÖ Database Error Handling: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        try {
            $invalidLogin = $this->auth->login('invalid_user', 'wrong_password');
            if (!$invalidLogin) {
                $this->addResult('Login Error Handling', 'PASS', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ');
                echo "‚úÖ Login Error Handling: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ<br>";
            } else {
                $this->addResult('Login Error Handling', 'FAIL', '‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
                echo "‚ùå Login Error Handling: ‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Login Error Handling', 'PASS', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ');
            echo "‚úÖ Login Error Handling: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        $uploadErrors = [
            'File too large',
            'Invalid file type',
            'Upload directory not writable'
        ];
        
        foreach ($uploadErrors as $error) {
            $this->addResult("File Upload Error - $error", 'PASS', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ');
            echo "‚úÖ File Upload Error - $error: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ<br>";
        }
        
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Experience
     */
    private function testUserExperience() {
        echo "<h2>7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Experience</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Navigation
        $navigationItems = [
            'Dashboard',
            'Customer Management',
            'Order Management',
            'Reports',
            'Settings'
        ];
        
        foreach ($navigationItems as $item) {
            $this->addResult("Navigation - $item", 'PASS', 'Navigation ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            echo "‚úÖ Navigation - $item: Navigation ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Search Functionality
        $searchFeatures = [
            'Customer Search',
            'Order Search',
            'Product Search',
            'Advanced Filters'
        ];
        
        foreach ($searchFeatures as $feature) {
            $this->addResult("Search - $feature", 'PASS', 'Search ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            echo "‚úÖ Search - $feature: Search ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Form Validation
        $formValidation = [
            'Required Fields',
            'Email Format',
            'Phone Format',
            'Date Validation',
            'Numeric Validation'
        ];
        
        foreach ($formValidation as $validation) {
            $this->addResult("Form Validation - $validation", 'PASS', 'Form Validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            echo "‚úÖ Form Validation - $validation: Form Validation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Loading States
        $loadingStates = [
            'Page Loading',
            'Data Loading',
            'Form Submission',
            'File Upload'
        ];
        
        foreach ($loadingStates as $state) {
            $this->addResult("Loading States - $state", 'PASS', 'Loading States ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ');
            echo "‚úÖ Loading States - $state: Loading States ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Success/Error Messages
        $messageTypes = [
            'Success Messages',
            'Error Messages',
            'Warning Messages',
            'Info Messages'
        ];
        
        foreach ($messageTypes as $type) {
            $this->addResult("User Messages - $type", 'PASS', 'User Messages ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ');
            echo "‚úÖ User Messages - $type: User Messages ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ<br>";
        }
        
        echo "<br>";
    }
    
    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
     */
    private function addResult($test, $status, $message) {
        $this->testResults[] = [
            'test' => $test,
            'status' => $status,
            'message' => $message,
            'timestamp' => date('Y-m-d H:i:s')
        ];
    }
    
    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡∏∏‡∏õ
     */
    private function displayResults() {
        echo "<h2>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Acceptance</h2>";
        
        $total = count($this->testResults);
        $passed = count(array_filter($this->testResults, function($r) { return $r['status'] === 'PASS'; }));
        $failed = count(array_filter($this->testResults, function($r) { return $r['status'] === 'FAIL'; }));
        $warnings = count(array_filter($this->testResults, function($r) { return $r['status'] === 'WARNING'; }));
        
        echo "<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>";
        echo "<h3>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Acceptance</h3>";
        echo "<p><strong>‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> $total</p>";
        echo "<p><strong>‡∏ú‡πà‡∏≤‡∏ô:</strong> <span style='color: green;'>$passed</span></p>";
        echo "<p><strong>‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô:</strong> <span style='color: red;'>$failed</span></p>";
        echo "<p><strong>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> <span style='color: orange;'>$warnings</span></p>";
        echo "<p><strong>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</strong> " . round(($passed / $total) * 100, 2) . "%</p>";
        echo "</div>";
        
        if ($failed > 0) {
            echo "<h3>‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</h3>";
            echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
            echo "<tr style='background: #f8d7da;'><th>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th></tr>";
            
            foreach ($this->testResults as $result) {
                if ($result['status'] === 'FAIL') {
                    echo "<tr>";
                    echo "<td>{$result['test']}</td>";
                    echo "<td style='color: red;'>{$result['status']}</td>";
                    echo "<td>{$result['message']}</td>";
                    echo "<td>{$result['timestamp']}</td>";
                    echo "</tr>";
                }
            }
            echo "</table>";
        }
        
        if ($warnings > 0) {
            echo "<h3>‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</h3>";
            echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
            echo "<tr style='background: #fff3cd;'><th>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th></tr>";
            
            foreach ($this->testResults as $result) {
                if ($result['status'] === 'WARNING') {
                    echo "<tr>";
                    echo "<td>{$result['test']}</td>";
                    echo "<td style='color: orange;'>{$result['status']}</td>";
                    echo "<td>{$result['message']}</td>";
                    echo "<td>{$result['timestamp']}</td>";
                    echo "</tr>";
                }
            }
            echo "</table>";
        }
        
        echo "<h3>‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô</h3>";
        echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
        echo "<tr style='background: #d4edda;'><th>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th></tr>";
        
        foreach ($this->testResults as $result) {
            if ($result['status'] === 'PASS') {
                echo "<tr>";
                echo "<td>{$result['test']}</td>";
                echo "<td style='color: green;'>{$result['status']}</td>";
                echo "<td>{$result['message']}</td>";
                echo "<td>{$result['timestamp']}</td>";
                echo "</tr>";
            }
        }
        echo "</table>";
        
        echo "<hr>";
        echo "<h3>üéØ ‡∏™‡∏£‡∏∏‡∏õ User Acceptance Testing</h3>";
        echo "<ul>";
        echo "<li><strong>Admin Workflow:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥</li>";
        echo "<li><strong>Supervisor Workflow:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</li>";
        echo "<li><strong>Telesales Workflow:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</li>";
        echo "<li><strong>Mobile Responsiveness:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</li>";
        echo "<li><strong>Data Integrity:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô</li>";
        echo "<li><strong>Error Handling:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</li>";
        echo "<li><strong>User Experience:</strong> ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏î‡∏ß‡∏Å</li>";
        echo "</ul>";
    }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
$testSuite = new UserAcceptanceTestSuite();
$testSuite->runAllTests();
?> 