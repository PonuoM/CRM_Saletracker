<?php
/**
 * Appointment Service
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

require_once __DIR__ . '/../core/Database.php';

class AppointmentService {
    private $db;
    
    public function __construct() {
        $this->db = new Database();
    }
    
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
     */
    public function createAppointment($data) {
        try {
            // Log input data for debugging
            error_log("AppointmentService - Input data: " . print_r($data, true));
            
            $sql = "INSERT INTO appointments (
                customer_id, user_id, appointment_date, appointment_type, 
                appointment_status, location, contact_person, contact_phone,
                title, description, notes
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            $params = [
                $data['customer_id'],
                $data['user_id'],
                $data['appointment_date'],
                $data['appointment_type'],
                $data['appointment_status'] ?? 'scheduled',
                $data['location'] ?? null,
                $data['contact_person'] ?? null,
                $data['contact_phone'] ?? null,
                $data['title'] ?? null,
                $data['description'] ?? null,
                $data['notes'] ?? null
            ];
            
            // Log SQL and params for debugging
            error_log("AppointmentService - SQL: " . $sql);
            error_log("AppointmentService - Params: " . print_r($params, true));
            
            $result = $this->db->executeInsert($sql, $params);
            
            error_log("AppointmentService - Insert result: " . ($result ? 'true' : 'false'));
            
            if ($result) {
                $appointmentId = $this->db->lastInsertId();
                error_log("AppointmentService - Inserted ID: " . $appointmentId);
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                $this->logActivity($appointmentId, $data['user_id'], 'created', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà');

                // üîÑ SYNC: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customers.next_followup_at ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ sync ‡∏Å‡∏±‡∏ö appointment
                try {
                    $this->db->query(
                        "UPDATE customers 
                         SET next_followup_at = ?, 
                             customer_status = CASE WHEN customer_status = 'new' THEN 'followup' ELSE customer_status END,
                             customer_time_expiry = LEAST(DATE_ADD(customer_time_expiry, INTERVAL 30 DAY), DATE_ADD(NOW(), INTERVAL 90 DAY)),
                             updated_at = NOW()
                         WHERE customer_id = ?",
                        [$data['appointment_date'], $data['customer_id']]
                    );
                } catch (Exception $e) {
                    error_log('Failed to update customer followup info: ' . $e->getMessage());
                }
                
                return [
                    'success' => true,
                    'appointment_id' => $appointmentId,
                    'message' => '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
                ];
            }
            
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'
            ];
            
        } catch (Exception $e) {
            error_log("AppointmentService - Exception: " . $e->getMessage());
            error_log("AppointmentService - Stack trace: " . $e->getTraceAsString());
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public function updateAppointment($appointmentId, $data) {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            $currentAppointment = $this->getAppointmentById($appointmentId);
            if (!$currentAppointment['success']) {
                return $currentAppointment;
            }
            
            $sql = "UPDATE appointments SET 
                appointment_date = ?, appointment_type = ?, appointment_status = ?,
                location = ?, contact_person = ?, contact_phone = ?,
                title = ?, description = ?, notes = ?, updated_at = NOW()
                WHERE appointment_id = ?";
            
            $params = [
                $data['appointment_date'],
                $data['appointment_type'],
                $data['appointment_status'],
                $data['location'] ?? null,
                $data['contact_person'] ?? null,
                $data['contact_phone'] ?? null,
                $data['title'] ?? null,
                $data['description'] ?? null,
                $data['notes'] ?? null,
                $appointmentId
            ];
            
            $result = $this->db->query($sql, $params);
            
            if ($result) {
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                $this->logActivity($appointmentId, $data['user_id'], 'updated', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢');
                
                // üîÑ SYNC: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customers.next_followup_at ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                $customerId = $currentAppointment['data']['customer_id'];
                $oldDate = $currentAppointment['data']['appointment_date'];
                $newDate = $data['appointment_date'];
                
                if ($oldDate !== $newDate && $data['appointment_status'] !== 'completed' && $data['appointment_status'] !== 'cancelled') {
                    try {
                        $this->db->query(
                            "UPDATE customers 
                             SET next_followup_at = ?,
                                 customer_time_expiry = LEAST(DATE_ADD(customer_time_expiry, INTERVAL 30 DAY), DATE_ADD(NOW(), INTERVAL 90 DAY)),
                                 updated_at = NOW()
                             WHERE customer_id = ?",
                            [$newDate, $customerId]
                        );
                    } catch (Exception $e) {
                        error_log('Failed to sync customer followup date: ' . $e->getMessage());
                    }
                }
                
                return [
                    'success' => true,
                    'message' => '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
                ];
            }
            
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public function deleteAppointment($appointmentId, $userId) {
        try {
            $sql = "DELETE FROM appointments WHERE appointment_id = ?";
            $result = $this->db->query($sql, [$appointmentId]);
            
            if ($result) {
                return [
                    'success' => true,
                    'message' => '‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
                ];
            }
            
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏° ID
     */
    public function getAppointmentById($appointmentId) {
        try {
            $sql = "SELECT a.*, c.first_name, c.last_name, c.phone as customer_phone,
                           u.full_name as user_name
                    FROM appointments a
                    LEFT JOIN customers c ON a.customer_id = c.customer_id
                    LEFT JOIN users u ON a.user_id = u.user_id
                    WHERE a.appointment_id = ?";
            
            $result = $this->db->fetchOne($sql, [$appointmentId]);
            
            if ($result) {
                return [
                    'success' => true,
                    'data' => $result
                ];
            }
            
            return [
                'success' => false,
                'message' => '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
     */
    public function getAppointmentsByCustomer($customerId, $limit = 10) {
        try {
            $sql = "SELECT a.*, u.full_name as user_name
                    FROM appointments a
                    LEFT JOIN users u ON a.user_id = u.user_id
                    WHERE a.customer_id = ?
                    ORDER BY a.appointment_date DESC
                    LIMIT ?";
            
            $result = $this->db->fetchAll($sql, [$customerId, $limit]);
            
            return [
                'success' => true,
                'data' => $result
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     */
    public function getAppointmentsByUser($userId, $status = null, $limit = 20) {
        try {
            $sql = "SELECT a.*, c.first_name, c.last_name, c.phone as customer_phone
                    FROM appointments a
                    LEFT JOIN customers c ON a.customer_id = c.customer_id
                    WHERE a.user_id = ?";
            
            $params = [$userId];
            
            if ($status) {
                $sql .= " AND a.appointment_status = ?";
                $params[] = $status;
            }
            
            $sql .= " ORDER BY a.appointment_date ASC LIMIT ?";
            $params[] = $limit;
            
            $result = $this->db->fetchAll($sql, $params);
            
            return [
                'success' => true,
                'data' => $result
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     */
    public function getUpcomingAppointments($userId = null, $days = 7) {
        try {
            $sql = "SELECT a.*, c.first_name, c.last_name, c.phone as customer_phone,
                           u.full_name as user_name
                    FROM appointments a
                    LEFT JOIN customers c ON a.customer_id = c.customer_id
                    LEFT JOIN users u ON a.user_id = u.user_id
                    WHERE a.appointment_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL ? DAY)
                    AND a.appointment_status IN ('scheduled', 'confirmed')";
            
            $params = [$days];
            
            if ($userId) {
                $sql .= " AND a.user_id = ?";
                $params[] = $userId;
            }
            
            $sql .= " ORDER BY a.appointment_date ASC";
            
            $result = $this->db->fetchAll($sql, $params);
            
            return [
                'success' => true,
                'data' => $result
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public function updateAppointmentStatus($appointmentId, $status, $userId) {
        try {
            $sql = "UPDATE appointments SET appointment_status = ?, updated_at = NOW() WHERE appointment_id = ?";
            $result = $this->db->query($sql, [$status, $appointmentId]);
            
            if ($result) {
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                $activityType = $status === 'completed' ? 'completed' : 'updated';
                $this->logActivity($appointmentId, $userId, $activityType, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô: $status");
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if ($status === 'completed') {
                    $this->handleAppointmentCompletion($appointmentId, $userId);
                }
                
                return [
                    'success' => true,
                    'message' => '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
                ];
            }
            
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ - ‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
     */
    private function handleAppointmentCompletion($appointmentId, $userId) {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            $appointment = $this->getAppointmentById($appointmentId);
            if (!$appointment || !$appointment['success']) {
                error_log("Appointment not found or error: {$appointmentId}");
                return;
            }
            
            $customerId = $appointment['data']['customer_id'];
            
            // ‡∏•‡πâ‡∏≤‡∏á next_followup_at ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Do tab ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            $this->clearCustomerFollowUp($customerId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if ($this->shouldExtendTimeForAppointment($appointment['data'])) {
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AppointmentExtensionService
                require_once __DIR__ . '/AppointmentExtensionService.php';
                $extensionService = new AppointmentExtensionService();
                
                try {
                    $result = $extensionService->extendTimeFromAppointment(
                        $customerId,
                        $appointmentId,
                        $userId
                    );
                    
                    error_log("Auto extension result: " . print_r($result, true));
                    
                } catch (Exception $e) {
                    error_log("Auto extension failed: " . $e->getMessage());
                }
            }
            
        } catch (Exception $e) {
            error_log('Error handling appointment completion: ' . $e->getMessage());
        }
    }
    
    /**
     * ‡∏•‡πâ‡∏≤‡∏á next_followup_at ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Do tab
     * @param int $customerId ID ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
     */
    private function clearCustomerFollowUp($customerId) {
        try {
            // ‡∏•‡πâ‡∏≤‡∏á next_followup_at ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 90 ‡∏ß‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô)
            $this->db->execute(
                "UPDATE customers SET 
                    next_followup_at = NULL,
                    customer_time_expiry = LEAST(DATE_ADD(customer_time_expiry, INTERVAL 30 DAY), DATE_ADD(NOW(), INTERVAL 90 DAY))
                WHERE customer_id = ?",
                [$customerId]
            );
            
            // ‡∏•‡πâ‡∏≤‡∏á next_followup_at ‡πÉ‡∏ô call_logs ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
            $this->db->execute(
                "UPDATE call_logs SET next_followup_at = NULL 
                 WHERE customer_id = ? AND next_followup_at IS NOT NULL",
                [$customerId]
            );
            
        } catch (Exception $e) {
            error_log("Error clearing customer follow-up in AppointmentService: " . $e->getMessage());
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    private function shouldExtendTimeForAppointment($appointment) {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤
            $sql = "SELECT * FROM appointment_extension_rules WHERE is_active = TRUE LIMIT 1";
            $rule = $this->db->fetchOne($sql);
            
            if (!$rule) {
                return false; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏é‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            if ($appointment['appointment_status'] !== $rule['required_appointment_status']) {
                return false;
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            $customerSql = "SELECT customer_grade, temperature_status FROM customers WHERE customer_id = ?";
            $customer = $this->db->fetchOne($customerSql, [$appointment['customer_id']]);
            
            if (!$customer) {
                return false;
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            $gradeOrder = ['D', 'C', 'B', 'A', 'A+'];
            $customerGradeIndex = array_search($customer['customer_grade'], $gradeOrder);
            $minGradeIndex = array_search($rule['min_customer_grade'], $gradeOrder);
            
            if ($customerGradeIndex < $minGradeIndex) {
                return false; // ‡πÄ‡∏Å‡∏£‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
            $temperatureFilter = json_decode($rule['temperature_status_filter'], true);
            if (!in_array($customer['temperature_status'], $temperatureFilter)) {
                return false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            $canExtendSql = "SELECT appointment_extension_count, max_appointment_extensions 
                           FROM customers WHERE customer_id = ?";
            $extensionInfo = $this->db->fetchOne($canExtendSql, [$appointment['customer_id']]);
            
            if (!$extensionInfo) {
                return false;
            }
            
            return $extensionInfo['appointment_extension_count'] < $extensionInfo['max_appointment_extensions'];
            
        } catch (Exception $e) {
            error_log('Error checking if should extend time: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    private function logActivity($appointmentId, $userId, $activityType, $description) {
        try {
            $sql = "INSERT INTO appointment_activities (appointment_id, user_id, activity_type, activity_description) 
                    VALUES (?, ?, ?, ?)";
            
            $this->db->query($sql, [$appointmentId, $userId, $activityType, $description]);
            
        } catch (Exception $e) {
            // Log error but don't fail the main operation
            error_log("Error logging appointment activity: " . $e->getMessage());
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public function getAppointmentActivities($appointmentId) {
        try {
            $sql = "SELECT aa.*, u.full_name as user_name
                    FROM appointment_activities aa
                    LEFT JOIN users u ON aa.user_id = u.user_id
                    WHERE aa.appointment_id = ?
                    ORDER BY aa.created_at DESC";
            
            $result = $this->db->fetchAll($sql, [$appointmentId]);
            
            return [
                'success' => true,
                'data' => $result
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public function sendAppointmentReminder($appointmentId) {
        try {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            $sql = "UPDATE appointments SET reminder_sent = TRUE, reminder_sent_at = NOW() 
                    WHERE appointment_id = ?";
            $this->db->query($sql, [$appointmentId]);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            $appointment = $this->getAppointmentById($appointmentId);
            if ($appointment['success']) {
                $this->logActivity($appointmentId, $appointment['data']['user_id'], 'reminder_sent', '‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢');
            }
            
            return [
                'success' => true,
                'message' => '‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
     */
    public function getAppointmentStats($userId = null, $period = 'month') {
        try {
            $dateFilter = '';
            switch ($period) {
                case 'week':
                    $dateFilter = "AND appointment_date >= DATE_SUB(NOW(), INTERVAL 7 DAY)";
                    break;
                case 'month':
                    $dateFilter = "AND appointment_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)";
                    break;
                case 'year':
                    $dateFilter = "AND appointment_date >= DATE_SUB(NOW(), INTERVAL 1 YEAR)";
                    break;
            }
            
            $userFilter = $userId ? "AND user_id = $userId" : "";
            
            $sql = "SELECT 
                        appointment_status,
                        appointment_type,
                        COUNT(*) as count
                    FROM appointments 
                    WHERE 1=1 $dateFilter $userFilter
                    GROUP BY appointment_status, appointment_type";
            
            $result = $this->db->fetchAll($sql);
            
            return [
                'success' => true,
                'data' => $result
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
}
?> 