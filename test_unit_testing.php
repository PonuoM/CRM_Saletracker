<?php
/**
 * Unit Testing Suite ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRM SalesTracker
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
 */

// Load configuration
require_once __DIR__ . '/config/config.php';
require_once __DIR__ . '/app/core/Database.php';
require_once __DIR__ . '/app/core/Auth.php';
require_once __DIR__ . '/app/services/CustomerService.php';
require_once __DIR__ . '/app/services/OrderService.php';
require_once __DIR__ . '/app/services/DashboardService.php';

class UnitTestSuite {
    private $db;
    private $auth;
    private $customerService;
    private $orderService;
    private $dashboardService;
    private $testResults = [];
    
    public function __construct() {
        $this->db = new Database();
        $this->auth = new Auth();
        $this->customerService = new CustomerService();
        $this->orderService = new OrderService();
        $this->dashboardService = new DashboardService();
    }
    
    /**
     * ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    public function runAllTests() {
        echo "<h1>üß™ Unit Testing Suite - CRM SalesTracker</h1>";
        echo "<p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> " . date('Y-m-d H:i:s') . "</p>";
        echo "<hr>";
        
        $this->testDatabaseConnection();
        $this->testAuthentication();
        $this->testCustomerService();
        $this->testOrderService();
        $this->testDashboardService();
        $this->testBusinessLogic();
        
        $this->displayResults();
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    private function testDatabaseConnection() {
        echo "<h2>1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>";
        
        try {
            $result = $this->db->query("SELECT 1 as test");
            if ($result && $result->fetch()) {
                $this->addResult('Database Connection', 'PASS', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
            } else {
                $this->addResult('Database Connection', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Database Connection', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Error: " . $e->getMessage() . "<br>";
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        $tables = ['users', 'customers', 'orders', 'products', 'roles'];
        foreach ($tables as $table) {
            try {
                $result = $this->db->query("SELECT COUNT(*) as count FROM $table");
                if ($result) {
                    $count = $result->fetch()['count'];
                    $this->addResult("Table: $table", 'PASS', "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• $count ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
                    echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table: $count ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
                }
            } catch (Exception $e) {
                $this->addResult("Table: $table", 'FAIL', 'Error: ' . $e->getMessage());
                echo "‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table: Error<br>";
            }
        }
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Authentication
     */
    private function testAuthentication() {
        echo "<h2>2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Authentication</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        try {
            $testUser = $this->auth->getUserById(1);
            if ($testUser) {
                $this->addResult('Get User by ID', 'PASS', '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
                
                // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                $hasPermission = $this->auth->hasPermission($testUser['role_id'], 'customer_management');
                $this->addResult('Permission Check', 'PASS', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
            } else {
                $this->addResult('Get User by ID', 'FAIL', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ<br>";
            }
        } catch (Exception $e) {
            $this->addResult('Authentication', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Error: " . $e->getMessage() . "<br>";
        }
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CustomerService
     */
    private function testCustomerService() {
        echo "<h2>3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CustomerService</h2>";
        
        try {
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            $customers = $this->customerService->getCustomers(['basket_type' => 'distribution']);
            if (is_array($customers)) {
                $this->addResult('Get Customers', 'PASS', '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ' . count($customers) . ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
                echo "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ " . count($customers) . " ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
            } else {
                $this->addResult('Get Customers', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ<br>";
            }
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            $grade = $this->customerService->calculateCustomerGrade(50000);
            if ($grade === 'A+') {
                $this->addResult('Calculate Grade', 'PASS', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: A+');
                echo "‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: A+<br>";
            } else {
                $this->addResult('Calculate Grade', 'FAIL', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏ú‡∏¥‡∏î: ‡πÑ‡∏î‡πâ ' . $grade . ' ‡πÅ‡∏ó‡∏ô A+');
                echo "‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏ú‡∏¥‡∏î: ‡πÑ‡∏î‡πâ $grade ‡πÅ‡∏ó‡∏ô A+<br>";
            }
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
            $temp = $this->customerService->calculateTemperatureStatus('2024-01-01');
            if (in_array($temp, ['hot', 'warm', 'cold', 'frozen'])) {
                $this->addResult('Calculate Temperature', 'PASS', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' . $temp);
                echo "‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $temp<br>";
            } else {
                $this->addResult('Calculate Temperature', 'FAIL', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ú‡∏¥‡∏î: ' . $temp);
                echo "‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ú‡∏¥‡∏î: $temp<br>";
            }
            
        } catch (Exception $e) {
            $this->addResult('CustomerService', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Error: " . $e->getMessage() . "<br>";
        }
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OrderService
     */
    private function testOrderService() {
        echo "<h2>4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OrderService</h2>";
        
        try {
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            $orders = $this->orderService->getOrders(['limit' => 5]);
            if (is_array($orders)) {
                $this->addResult('Get Orders', 'PASS', '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ' . count($orders) . ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
                echo "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ " . count($orders) . " ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
            } else {
                $this->addResult('Get Orders', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ');
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ<br>";
            }
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            $orderNumber = $this->orderService->generateOrderNumber();
            if (preg_match('/^ORD-\d{8}-\d{4}$/', $orderNumber)) {
                $this->addResult('Generate Order Number', 'PASS', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' . $orderNumber);
                echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $orderNumber<br>";
            } else {
                $this->addResult('Generate Order Number', 'FAIL', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏¥‡∏î: ' . $orderNumber);
                echo "‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏¥‡∏î: $orderNumber<br>";
            }
            
        } catch (Exception $e) {
            $this->addResult('OrderService', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Error: " . $e->getMessage() . "<br>";
        }
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö DashboardService
     */
    private function testDashboardService() {
        echo "<h2>5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö DashboardService</h2>";
        
        try {
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard
            $dashboardData = $this->dashboardService->getDashboardData(1, 'telesales');
            if (is_array($dashboardData)) {
                $this->addResult('Get Dashboard Data', 'PASS', '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                echo "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                $requiredKeys = ['total_customers', 'total_orders', 'total_revenue'];
                $missingKeys = array_diff($requiredKeys, array_keys($dashboardData));
                
                if (empty($missingKeys)) {
                    $this->addResult('Dashboard Data Structure', 'PASS', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                    echo "‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô<br>";
                } else {
                    $this->addResult('Dashboard Data Structure', 'FAIL', '‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' . implode(', ', $missingKeys));
                    echo "‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " . implode(', ', $missingKeys) . "<br>";
                }
            } else {
                $this->addResult('Get Dashboard Data', 'FAIL', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡πÑ‡∏î‡πâ');
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡πÑ‡∏î‡πâ<br>";
            }
            
        } catch (Exception $e) {
            $this->addResult('DashboardService', 'FAIL', 'Error: ' . $e->getMessage());
            echo "‚ùå Error: " . $e->getMessage() . "<br>";
        }
        echo "<br>";
    }
    
    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Business Logic
     */
    private function testBusinessLogic() {
        echo "<h2>6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Business Logic</h2>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        $testCases = [
            ['amount' => 150000, 'expected' => 'A+'],
            ['amount' => 75000, 'expected' => 'A'],
            ['amount' => 25000, 'expected' => 'B'],
            ['amount' => 8000, 'expected' => 'C'],
            ['amount' => 2000, 'expected' => 'D']
        ];
        
        foreach ($testCases as $testCase) {
            $grade = $this->customerService->calculateCustomerGrade($testCase['amount']);
            if ($grade === $testCase['expected']) {
                $this->addResult("Grade Calculation (‡∏ø{$testCase['amount']})", 'PASS', "‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î $grade");
                echo "‚úÖ ‡∏ø{$testCase['amount']} ‚Üí ‡πÄ‡∏Å‡∏£‡∏î $grade<br>";
            } else {
                $this->addResult("Grade Calculation (‡∏ø{$testCase['amount']})", 'FAIL', "‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î $grade ‡πÅ‡∏ó‡∏ô {$testCase['expected']}");
                echo "‚ùå ‡∏ø{$testCase['amount']} ‚Üí ‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î $grade ‡πÅ‡∏ó‡∏ô {$testCase['expected']}<br>";
            }
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
        $tempTestCases = [
            ['days' => 5, 'expected' => 'hot'],
            ['days' => 30, 'expected' => 'warm'],
            ['days' => 90, 'expected' => 'cold'],
            ['days' => 120, 'expected' => 'frozen']
        ];
        
        foreach ($tempTestCases as $testCase) {
            $date = date('Y-m-d', strtotime("-{$testCase['days']} days"));
            $temp = $this->customerService->calculateTemperatureStatus($date);
            if ($temp === $testCase['expected']) {
                $this->addResult("Temperature ({$testCase['days']} days)", 'PASS', "‡πÑ‡∏î‡πâ $temp");
                echo "‚úÖ {$testCase['days']} ‡∏ß‡∏±‡∏ô ‚Üí $temp<br>";
            } else {
                $this->addResult("Temperature ({$testCase['days']} days)", 'FAIL', "‡πÑ‡∏î‡πâ $temp ‡πÅ‡∏ó‡∏ô {$testCase['expected']}");
                echo "‚ùå {$testCase['days']} ‡∏ß‡∏±‡∏ô ‚Üí ‡πÑ‡∏î‡πâ $temp ‡πÅ‡∏ó‡∏ô {$testCase['expected']}<br>";
            }
        }
        
        echo "<br>";
    }
    
    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
     */
    private function addResult($test, $status, $message) {
        $this->testResults[] = [
            'test' => $test,
            'status' => $status,
            'message' => $message,
            'timestamp' => date('Y-m-d H:i:s')
        ];
    }
    
    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡∏∏‡∏õ
     */
    private function displayResults() {
        echo "<h2>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";
        
        $total = count($this->testResults);
        $passed = count(array_filter($this->testResults, function($r) { return $r['status'] === 'PASS'; }));
        $failed = $total - $passed;
        
        echo "<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>";
        echo "<h3>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h3>";
        echo "<p><strong>‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> $total</p>";
        echo "<p><strong>‡∏ú‡πà‡∏≤‡∏ô:</strong> <span style='color: green;'>$passed</span></p>";
        echo "<p><strong>‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô:</strong> <span style='color: red;'>$failed</span></p>";
        echo "<p><strong>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</strong> " . round(($passed / $total) * 100, 2) . "%</p>";
        echo "</div>";
        
        if ($failed > 0) {
            echo "<h3>‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</h3>";
            echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
            echo "<tr style='background: #f8d7da;'><th>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th></tr>";
            
            foreach ($this->testResults as $result) {
                if ($result['status'] === 'FAIL') {
                    echo "<tr>";
                    echo "<td>{$result['test']}</td>";
                    echo "<td style='color: red;'>{$result['status']}</td>";
                    echo "<td>{$result['message']}</td>";
                    echo "<td>{$result['timestamp']}</td>";
                    echo "</tr>";
                }
            }
            echo "</table>";
        }
        
        echo "<h3>‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô</h3>";
        echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
        echo "<tr style='background: #d4edda;'><th>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th></tr>";
        
        foreach ($this->testResults as $result) {
            if ($result['status'] === 'PASS') {
                echo "<tr>";
                echo "<td>{$result['test']}</td>";
                echo "<td style='color: green;'>{$result['status']}</td>";
                echo "<td>{$result['message']}</td>";
                echo "<td>{$result['timestamp']}</td>";
                echo "</tr>";
            }
        }
        echo "</table>";
        
        echo "<hr>";
        echo "<p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö CRM SalesTracker</p>";
        echo "<p><strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á</p>";
    }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
$testSuite = new UnitTestSuite();
$testSuite->runAllTests();
?> 